//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/github/howtobuildapp/libservice/execute/SyncExecutorManager.java
//

#include "J2ObjC_source.h"
#include "Request.h"
#include "Response.h"
#include "SyncExecuteInterface.h"
#include "SyncExecutorManager.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface HTBASyncExecutorManager () {
 @public
  id<JavaUtilMap> registerInfo_;
}

@end

J2OBJC_FIELD_SETTER(HTBASyncExecutorManager, registerInfo_, id<JavaUtilMap>)

inline HTBASyncExecutorManager *HTBASyncExecutorManager_get_defaultInstance();
inline HTBASyncExecutorManager *HTBASyncExecutorManager_set_defaultInstance(HTBASyncExecutorManager *value);
static HTBASyncExecutorManager *HTBASyncExecutorManager_defaultInstance;
J2OBJC_STATIC_FIELD_OBJ(HTBASyncExecutorManager, defaultInstance, HTBASyncExecutorManager *)

@implementation HTBASyncExecutorManager

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  HTBASyncExecutorManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (HTBASyncExecutorManager *)defaultManager {
  return HTBASyncExecutorManager_defaultManager();
}

- (void)registerExecutorForKeyWithNSString:(NSString *)key
              withHTBASyncExecuteInterface:(id<HTBASyncExecuteInterface>)executor {
  if (key == nil || executor == nil) {
    return;
  }
  (void) [((id<JavaUtilMap>) nil_chk(registerInfo_)) putWithId:key withId:executor];
}

- (void)unregisterExecutorForKeyWithNSString:(NSString *)key {
  if (key == nil) {
    return;
  }
  (void) [((id<JavaUtilMap>) nil_chk(registerInfo_)) removeWithId:key];
}

- (void)registerExecutorForRequestWithHTBARequest:(HTBARequest *)req
                     withHTBASyncExecuteInterface:(id<HTBASyncExecuteInterface>)executor {
  if (req == nil || executor == nil) {
    return;
  }
  [self registerExecutorForKeyWithNSString:[req getKindString] withHTBASyncExecuteInterface:executor];
}

- (void)unregisterExecutorForRequestWithHTBARequest:(HTBARequest *)req {
  if (req == nil) {
    return;
  }
  [self unregisterExecutorForKeyWithNSString:[req getKindString]];
}

- (HTBAResponse *)executeRequestSyncWithHTBARequest:(HTBARequest *)req {
  if (req == nil || req == nil) {
    return nil;
  }
  NSString *key = [req getKindString];
  id<HTBASyncExecuteInterface> executor = [((id<JavaUtilMap>) nil_chk(registerInfo_)) getWithId:key];
  if (executor == nil) {
    return nil;
  }
  return [executor executeRequestSyncWithHTBARequest:req];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHTBASyncExecutorManager;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LHTBAResponse;", 0x1, 8, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(defaultManager);
  methods[2].selector = @selector(registerExecutorForKeyWithNSString:withHTBASyncExecuteInterface:);
  methods[3].selector = @selector(unregisterExecutorForKeyWithNSString:);
  methods[4].selector = @selector(registerExecutorForRequestWithHTBARequest:withHTBASyncExecuteInterface:);
  methods[5].selector = @selector(unregisterExecutorForRequestWithHTBARequest:);
  methods[6].selector = @selector(executeRequestSyncWithHTBARequest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "registerInfo_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 9, -1 },
    { "defaultInstance", "LHTBASyncExecutorManager;", .constantValue.asLong = 0, 0xa, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "registerExecutorForKey", "LNSString;LHTBASyncExecuteInterface;", "unregisterExecutorForKey", "LNSString;", "registerExecutorForRequest", "LHTBARequest;LHTBASyncExecuteInterface;", "unregisterExecutorForRequest", "LHTBARequest;", "executeRequestSync", "Ljava/util/Map<Ljava/lang/String;Lcom/github/howtobuildapp/libservice/execute/SyncExecuteInterface;>;", &HTBASyncExecutorManager_defaultInstance };
  static const J2ObjcClassInfo _HTBASyncExecutorManager = { "SyncExecutorManager", "com.github.howtobuildapp.libservice.execute", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_HTBASyncExecutorManager;
}

@end

void HTBASyncExecutorManager_init(HTBASyncExecutorManager *self) {
  NSObject_init(self);
  self->registerInfo_ = new_JavaUtilHashMap_init();
}

HTBASyncExecutorManager *new_HTBASyncExecutorManager_init() {
  J2OBJC_NEW_IMPL(HTBASyncExecutorManager, init)
}

HTBASyncExecutorManager *create_HTBASyncExecutorManager_init() {
  J2OBJC_CREATE_IMPL(HTBASyncExecutorManager, init)
}

HTBASyncExecutorManager *HTBASyncExecutorManager_defaultManager() {
  HTBASyncExecutorManager_initialize();
  if (HTBASyncExecutorManager_defaultInstance == nil) {
    HTBASyncExecutorManager_defaultInstance = new_HTBASyncExecutorManager_init();
  }
  return HTBASyncExecutorManager_defaultInstance;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HTBASyncExecutorManager)
