//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/stream/JsonScope.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JsonScope")
#ifdef RESTRICT_JsonScope
#define INCLUDE_ALL_JsonScope 0
#else
#define INCLUDE_ALL_JsonScope 1
#endif
#undef RESTRICT_JsonScope

#if !defined (GSONJsonScope_) && (INCLUDE_ALL_JsonScope || defined(INCLUDE_GSONJsonScope))
#define GSONJsonScope_

/*!
 @brief Lexical scoping elements within a JSON reader or writer.
 @author Jesse Wilson
 @since 1.6
 */
@interface GSONJsonScope : NSObject

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONJsonScope)

/*!
 @brief An array with no elements requires no separators or newlines before
  it is closed.
 */
inline jint GSONJsonScope_get_EMPTY_ARRAY();
#define GSONJsonScope_EMPTY_ARRAY 1
J2OBJC_STATIC_FIELD_CONSTANT(GSONJsonScope, EMPTY_ARRAY, jint)

/*!
 @brief A array with at least one value requires a comma and newline before
  the next element.
 */
inline jint GSONJsonScope_get_NONEMPTY_ARRAY();
#define GSONJsonScope_NONEMPTY_ARRAY 2
J2OBJC_STATIC_FIELD_CONSTANT(GSONJsonScope, NONEMPTY_ARRAY, jint)

/*!
 @brief An object with no name/value pairs requires no separators or newlines
  before it is closed.
 */
inline jint GSONJsonScope_get_EMPTY_OBJECT();
#define GSONJsonScope_EMPTY_OBJECT 3
J2OBJC_STATIC_FIELD_CONSTANT(GSONJsonScope, EMPTY_OBJECT, jint)

/*!
 @brief An object whose most recent element is a key.The next element must
  be a value.
 */
inline jint GSONJsonScope_get_DANGLING_NAME();
#define GSONJsonScope_DANGLING_NAME 4
J2OBJC_STATIC_FIELD_CONSTANT(GSONJsonScope, DANGLING_NAME, jint)

/*!
 @brief An object with at least one name/value pair requires a comma and
  newline before the next element.
 */
inline jint GSONJsonScope_get_NONEMPTY_OBJECT();
#define GSONJsonScope_NONEMPTY_OBJECT 5
J2OBJC_STATIC_FIELD_CONSTANT(GSONJsonScope, NONEMPTY_OBJECT, jint)

/*!
 @brief No object or array has been started.
 */
inline jint GSONJsonScope_get_EMPTY_DOCUMENT();
#define GSONJsonScope_EMPTY_DOCUMENT 6
J2OBJC_STATIC_FIELD_CONSTANT(GSONJsonScope, EMPTY_DOCUMENT, jint)

/*!
 @brief A document with at an array or object.
 */
inline jint GSONJsonScope_get_NONEMPTY_DOCUMENT();
#define GSONJsonScope_NONEMPTY_DOCUMENT 7
J2OBJC_STATIC_FIELD_CONSTANT(GSONJsonScope, NONEMPTY_DOCUMENT, jint)

/*!
 @brief A document that's been closed and cannot be accessed.
 */
inline jint GSONJsonScope_get_CLOSED();
#define GSONJsonScope_CLOSED 8
J2OBJC_STATIC_FIELD_CONSTANT(GSONJsonScope, CLOSED, jint)

FOUNDATION_EXPORT void GSONJsonScope_init(GSONJsonScope *self);

FOUNDATION_EXPORT GSONJsonScope *new_GSONJsonScope_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GSONJsonScope *create_GSONJsonScope_init();

J2OBJC_TYPE_LITERAL_HEADER(GSONJsonScope)

@compatibility_alias ComGoogleGsonStreamJsonScope GSONJsonScope;

#endif

#pragma pop_macro("INCLUDE_ALL_JsonScope")
