//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/internal/bind/TreeTypeAdapter.java
//

#include "$Gson$Preconditions.h"
#include "Gson.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JsonDeserializationContext.h"
#include "JsonDeserializer.h"
#include "JsonElement.h"
#include "JsonReader.h"
#include "JsonSerializationContext.h"
#include "JsonSerializer.h"
#include "JsonWriter.h"
#include "Streams.h"
#include "TreeTypeAdapter.h"
#include "TypeAdapter.h"
#include "TypeAdapterFactory.h"
#include "TypeToken.h"
#include "java/lang/reflect/Type.h"

@class GSONTreeTypeAdapter_GsonContextImpl;

@interface GSONTreeTypeAdapter () {
 @public
  id<GSONJsonSerializer> serializer_;
  id<GSONJsonDeserializer> deserializer_;
  GSONTypeToken *typeToken_;
  id<GSONTypeAdapterFactory> skipPast_;
  GSONTreeTypeAdapter_GsonContextImpl *context_;
  /*!
   @brief The delegate is lazily created because it may not be needed, and creating it may fail.
   */
  GSONTypeAdapter *delegate_;
}

- (GSONTypeAdapter *)delegate;

@end

J2OBJC_FIELD_SETTER(GSONTreeTypeAdapter, serializer_, id<GSONJsonSerializer>)
J2OBJC_FIELD_SETTER(GSONTreeTypeAdapter, deserializer_, id<GSONJsonDeserializer>)
J2OBJC_FIELD_SETTER(GSONTreeTypeAdapter, typeToken_, GSONTypeToken *)
J2OBJC_FIELD_SETTER(GSONTreeTypeAdapter, skipPast_, id<GSONTypeAdapterFactory>)
J2OBJC_FIELD_SETTER(GSONTreeTypeAdapter, context_, GSONTreeTypeAdapter_GsonContextImpl *)
J2OBJC_FIELD_SETTER(GSONTreeTypeAdapter, delegate_, GSONTypeAdapter *)

__attribute__((unused)) static GSONTypeAdapter *GSONTreeTypeAdapter_delegate(GSONTreeTypeAdapter *self);

@interface GSONTreeTypeAdapter_SingleTypeFactory : NSObject < GSONTypeAdapterFactory > {
 @public
  GSONTypeToken *exactType_;
  jboolean matchRawType_;
  IOSClass *hierarchyType_;
  id<GSONJsonSerializer> serializer_;
  id<GSONJsonDeserializer> deserializer_;
}

- (instancetype)initWithId:(id)typeAdapter
         withGSONTypeToken:(GSONTypeToken *)exactType
               withBoolean:(jboolean)matchRawType
              withIOSClass:(IOSClass *)hierarchyType;

- (GSONTypeAdapter *)createWithGSONGson:(GSONGson *)gson
                      withGSONTypeToken:(GSONTypeToken *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONTreeTypeAdapter_SingleTypeFactory)

J2OBJC_FIELD_SETTER(GSONTreeTypeAdapter_SingleTypeFactory, exactType_, GSONTypeToken *)
J2OBJC_FIELD_SETTER(GSONTreeTypeAdapter_SingleTypeFactory, hierarchyType_, IOSClass *)
J2OBJC_FIELD_SETTER(GSONTreeTypeAdapter_SingleTypeFactory, serializer_, id<GSONJsonSerializer>)
J2OBJC_FIELD_SETTER(GSONTreeTypeAdapter_SingleTypeFactory, deserializer_, id<GSONJsonDeserializer>)

__attribute__((unused)) static void GSONTreeTypeAdapter_SingleTypeFactory_initWithId_withGSONTypeToken_withBoolean_withIOSClass_(GSONTreeTypeAdapter_SingleTypeFactory *self, id typeAdapter, GSONTypeToken *exactType, jboolean matchRawType, IOSClass *hierarchyType);

__attribute__((unused)) static GSONTreeTypeAdapter_SingleTypeFactory *new_GSONTreeTypeAdapter_SingleTypeFactory_initWithId_withGSONTypeToken_withBoolean_withIOSClass_(id typeAdapter, GSONTypeToken *exactType, jboolean matchRawType, IOSClass *hierarchyType) NS_RETURNS_RETAINED;

__attribute__((unused)) static GSONTreeTypeAdapter_SingleTypeFactory *create_GSONTreeTypeAdapter_SingleTypeFactory_initWithId_withGSONTypeToken_withBoolean_withIOSClass_(id typeAdapter, GSONTypeToken *exactType, jboolean matchRawType, IOSClass *hierarchyType);

J2OBJC_TYPE_LITERAL_HEADER(GSONTreeTypeAdapter_SingleTypeFactory)

@interface GSONTreeTypeAdapter_GsonContextImpl : NSObject < GSONJsonSerializationContext, GSONJsonDeserializationContext > {
 @public
  GSONTreeTypeAdapter *this$0_;
}

- (instancetype)initWithGSONTreeTypeAdapter:(GSONTreeTypeAdapter *)outer$;

- (GSONJsonElement *)serializeWithId:(id)src;

- (GSONJsonElement *)serializeWithId:(id)src
             withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc;

- (id)deserializeWithGSONJsonElement:(GSONJsonElement *)json
             withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONTreeTypeAdapter_GsonContextImpl)

__attribute__((unused)) static void GSONTreeTypeAdapter_GsonContextImpl_initWithGSONTreeTypeAdapter_(GSONTreeTypeAdapter_GsonContextImpl *self, GSONTreeTypeAdapter *outer$);

__attribute__((unused)) static GSONTreeTypeAdapter_GsonContextImpl *new_GSONTreeTypeAdapter_GsonContextImpl_initWithGSONTreeTypeAdapter_(GSONTreeTypeAdapter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static GSONTreeTypeAdapter_GsonContextImpl *create_GSONTreeTypeAdapter_GsonContextImpl_initWithGSONTreeTypeAdapter_(GSONTreeTypeAdapter *outer$);

J2OBJC_TYPE_LITERAL_HEADER(GSONTreeTypeAdapter_GsonContextImpl)

@implementation GSONTreeTypeAdapter

- (instancetype)initWithGSONJsonSerializer:(id<GSONJsonSerializer>)serializer
                  withGSONJsonDeserializer:(id<GSONJsonDeserializer>)deserializer
                              withGSONGson:(GSONGson *)gson
                         withGSONTypeToken:(GSONTypeToken *)typeToken
                withGSONTypeAdapterFactory:(id<GSONTypeAdapterFactory>)skipPast {
  GSONTreeTypeAdapter_initWithGSONJsonSerializer_withGSONJsonDeserializer_withGSONGson_withGSONTypeToken_withGSONTypeAdapterFactory_(self, serializer, deserializer, gson, typeToken, skipPast);
  return self;
}

- (id)readWithGSONJsonReader:(GSONJsonReader *)inArg {
  if (deserializer_ == nil) {
    return [((GSONTypeAdapter *) nil_chk(GSONTreeTypeAdapter_delegate(self))) readWithGSONJsonReader:inArg];
  }
  GSONJsonElement *value = GSONStreams_parseWithGSONJsonReader_(inArg);
  if ([((GSONJsonElement *) nil_chk(value)) isJsonNull]) {
    return nil;
  }
  return [deserializer_ deserializeWithGSONJsonElement:value withJavaLangReflectType:[((GSONTypeToken *) nil_chk(typeToken_)) getType] withGSONJsonDeserializationContext:context_];
}

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(id)value {
  if (serializer_ == nil) {
    [((GSONTypeAdapter *) nil_chk(GSONTreeTypeAdapter_delegate(self))) writeWithGSONJsonWriter:outArg withId:value];
    return;
  }
  if (value == nil) {
    (void) [((GSONJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  GSONJsonElement *tree = [serializer_ serializeWithId:value withJavaLangReflectType:[((GSONTypeToken *) nil_chk(typeToken_)) getType] withGSONJsonSerializationContext:context_];
  GSONStreams_writeWithGSONJsonElement_withGSONJsonWriter_(tree, outArg);
}

- (GSONTypeAdapter *)delegate {
  return GSONTreeTypeAdapter_delegate(self);
}

+ (id<GSONTypeAdapterFactory>)newFactoryWithGSONTypeToken:(GSONTypeToken *)exactType
                                                   withId:(id)typeAdapter {
  return GSONTreeTypeAdapter_newFactoryWithGSONTypeToken_withId_(exactType, typeAdapter);
}

+ (id<GSONTypeAdapterFactory>)newFactoryWithMatchRawTypeWithGSONTypeToken:(GSONTypeToken *)exactType
                                                                   withId:(id)typeAdapter {
  return GSONTreeTypeAdapter_newFactoryWithMatchRawTypeWithGSONTypeToken_withId_(exactType, typeAdapter);
}

+ (id<GSONTypeAdapterFactory>)newTypeHierarchyFactoryWithIOSClass:(IOSClass *)hierarchyType
                                                           withId:(id)typeAdapter {
  return GSONTreeTypeAdapter_newTypeHierarchyFactoryWithIOSClass_withId_(hierarchyType, typeAdapter);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, 4, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 4, 8, -1, -1 },
    { NULL, "LGSONTypeAdapter;", 0x2, -1, -1, -1, 9, -1, -1 },
    { NULL, "LGSONTypeAdapterFactory;", 0x9, 10, 11, -1, 12, -1, -1 },
    { NULL, "LGSONTypeAdapterFactory;", 0x9, 13, 11, -1, 12, -1, -1 },
    { NULL, "LGSONTypeAdapterFactory;", 0x9, 14, 15, -1, 16, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithGSONJsonSerializer:withGSONJsonDeserializer:withGSONGson:withGSONTypeToken:withGSONTypeAdapterFactory:);
  methods[1].selector = @selector(readWithGSONJsonReader:);
  methods[2].selector = @selector(writeWithGSONJsonWriter:withId:);
  methods[3].selector = @selector(delegate);
  methods[4].selector = @selector(newFactoryWithGSONTypeToken:withId:);
  methods[5].selector = @selector(newFactoryWithMatchRawTypeWithGSONTypeToken:withId:);
  methods[6].selector = @selector(newTypeHierarchyFactoryWithIOSClass:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serializer_", "LGSONJsonSerializer;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "deserializer_", "LGSONJsonDeserializer;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "gson_", "LGSONGson;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "typeToken_", "LGSONTypeToken;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
    { "skipPast_", "LGSONTypeAdapterFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "context_", "LGSONTreeTypeAdapter_GsonContextImpl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "delegate_", "LGSONTypeAdapter;", .constantValue.asLong = 0, 0x2, -1, -1, 20, -1 },
  };
  static const void *ptrTable[] = { "LGSONJsonSerializer;LGSONJsonDeserializer;LGSONGson;LGSONTypeToken;LGSONTypeAdapterFactory;", "(Lcom/google/gson/JsonSerializer<TT;>;Lcom/google/gson/JsonDeserializer<TT;>;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken<TT;>;Lcom/google/gson/TypeAdapterFactory;)V", "read", "LGSONJsonReader;", "LJavaIoIOException;", "(Lcom/google/gson/stream/JsonReader;)TT;", "write", "LGSONJsonWriter;LNSObject;", "(Lcom/google/gson/stream/JsonWriter;TT;)V", "()Lcom/google/gson/TypeAdapter<TT;>;", "newFactory", "LGSONTypeToken;LNSObject;", "(Lcom/google/gson/reflect/TypeToken<*>;Ljava/lang/Object;)Lcom/google/gson/TypeAdapterFactory;", "newFactoryWithMatchRawType", "newTypeHierarchyFactory", "LIOSClass;LNSObject;", "(Ljava/lang/Class<*>;Ljava/lang/Object;)Lcom/google/gson/TypeAdapterFactory;", "Lcom/google/gson/JsonSerializer<TT;>;", "Lcom/google/gson/JsonDeserializer<TT;>;", "Lcom/google/gson/reflect/TypeToken<TT;>;", "Lcom/google/gson/TypeAdapter<TT;>;", "LGSONTreeTypeAdapter_SingleTypeFactory;LGSONTreeTypeAdapter_GsonContextImpl;", "<T:Ljava/lang/Object;>Lcom/google/gson/TypeAdapter<TT;>;" };
  static const J2ObjcClassInfo _GSONTreeTypeAdapter = { "TreeTypeAdapter", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x11, 7, 7, -1, 21, -1, 22, -1 };
  return &_GSONTreeTypeAdapter;
}

@end

void GSONTreeTypeAdapter_initWithGSONJsonSerializer_withGSONJsonDeserializer_withGSONGson_withGSONTypeToken_withGSONTypeAdapterFactory_(GSONTreeTypeAdapter *self, id<GSONJsonSerializer> serializer, id<GSONJsonDeserializer> deserializer, GSONGson *gson, GSONTypeToken *typeToken, id<GSONTypeAdapterFactory> skipPast) {
  GSONTypeAdapter_init(self);
  self->context_ = new_GSONTreeTypeAdapter_GsonContextImpl_initWithGSONTreeTypeAdapter_(self);
  self->serializer_ = serializer;
  self->deserializer_ = deserializer;
  self->gson_ = gson;
  self->typeToken_ = typeToken;
  self->skipPast_ = skipPast;
}

GSONTreeTypeAdapter *new_GSONTreeTypeAdapter_initWithGSONJsonSerializer_withGSONJsonDeserializer_withGSONGson_withGSONTypeToken_withGSONTypeAdapterFactory_(id<GSONJsonSerializer> serializer, id<GSONJsonDeserializer> deserializer, GSONGson *gson, GSONTypeToken *typeToken, id<GSONTypeAdapterFactory> skipPast) {
  J2OBJC_NEW_IMPL(GSONTreeTypeAdapter, initWithGSONJsonSerializer_withGSONJsonDeserializer_withGSONGson_withGSONTypeToken_withGSONTypeAdapterFactory_, serializer, deserializer, gson, typeToken, skipPast)
}

GSONTreeTypeAdapter *create_GSONTreeTypeAdapter_initWithGSONJsonSerializer_withGSONJsonDeserializer_withGSONGson_withGSONTypeToken_withGSONTypeAdapterFactory_(id<GSONJsonSerializer> serializer, id<GSONJsonDeserializer> deserializer, GSONGson *gson, GSONTypeToken *typeToken, id<GSONTypeAdapterFactory> skipPast) {
  J2OBJC_CREATE_IMPL(GSONTreeTypeAdapter, initWithGSONJsonSerializer_withGSONJsonDeserializer_withGSONGson_withGSONTypeToken_withGSONTypeAdapterFactory_, serializer, deserializer, gson, typeToken, skipPast)
}

GSONTypeAdapter *GSONTreeTypeAdapter_delegate(GSONTreeTypeAdapter *self) {
  GSONTypeAdapter *d = self->delegate_;
  return d != nil ? d : (self->delegate_ = [((GSONGson *) nil_chk(self->gson_)) getDelegateAdapterWithGSONTypeAdapterFactory:self->skipPast_ withGSONTypeToken:self->typeToken_]);
}

id<GSONTypeAdapterFactory> GSONTreeTypeAdapter_newFactoryWithGSONTypeToken_withId_(GSONTypeToken *exactType, id typeAdapter) {
  GSONTreeTypeAdapter_initialize();
  return new_GSONTreeTypeAdapter_SingleTypeFactory_initWithId_withGSONTypeToken_withBoolean_withIOSClass_(typeAdapter, exactType, false, nil);
}

id<GSONTypeAdapterFactory> GSONTreeTypeAdapter_newFactoryWithMatchRawTypeWithGSONTypeToken_withId_(GSONTypeToken *exactType, id typeAdapter) {
  GSONTreeTypeAdapter_initialize();
  jboolean matchRawType = [((GSONTypeToken *) nil_chk(exactType)) getType] == (id) [exactType getRawType];
  return new_GSONTreeTypeAdapter_SingleTypeFactory_initWithId_withGSONTypeToken_withBoolean_withIOSClass_(typeAdapter, exactType, matchRawType, nil);
}

id<GSONTypeAdapterFactory> GSONTreeTypeAdapter_newTypeHierarchyFactoryWithIOSClass_withId_(IOSClass *hierarchyType, id typeAdapter) {
  GSONTreeTypeAdapter_initialize();
  return new_GSONTreeTypeAdapter_SingleTypeFactory_initWithId_withGSONTypeToken_withBoolean_withIOSClass_(typeAdapter, nil, false, hierarchyType);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GSONTreeTypeAdapter)

@implementation GSONTreeTypeAdapter_SingleTypeFactory

- (instancetype)initWithId:(id)typeAdapter
         withGSONTypeToken:(GSONTypeToken *)exactType
               withBoolean:(jboolean)matchRawType
              withIOSClass:(IOSClass *)hierarchyType {
  GSONTreeTypeAdapter_SingleTypeFactory_initWithId_withGSONTypeToken_withBoolean_withIOSClass_(self, typeAdapter, exactType, matchRawType, hierarchyType);
  return self;
}

- (GSONTypeAdapter *)createWithGSONGson:(GSONGson *)gson
                      withGSONTypeToken:(GSONTypeToken *)type {
  jboolean matches = exactType_ != nil ? [exactType_ isEqual:type] || (matchRawType_ && [exactType_ getType] == (id) [((GSONTypeToken *) nil_chk(type)) getRawType]) : [((IOSClass *) nil_chk(hierarchyType_)) isAssignableFrom:[((GSONTypeToken *) nil_chk(type)) getRawType]];
  return matches ? new_GSONTreeTypeAdapter_initWithGSONJsonSerializer_withGSONJsonDeserializer_withGSONGson_withGSONTypeToken_withGSONTypeAdapterFactory_(serializer_, deserializer_, gson, type, self) : nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LGSONTypeAdapter;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withGSONTypeToken:withBoolean:withIOSClass:);
  methods[1].selector = @selector(createWithGSONGson:withGSONTypeToken:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "exactType_", "LGSONTypeToken;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "matchRawType_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hierarchyType_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "serializer_", "LGSONJsonSerializer;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "deserializer_", "LGSONJsonDeserializer;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LGSONTypeToken;ZLIOSClass;", "(Ljava/lang/Object;Lcom/google/gson/reflect/TypeToken<*>;ZLjava/lang/Class<*>;)V", "create", "LGSONGson;LGSONTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "Lcom/google/gson/reflect/TypeToken<*>;", "Ljava/lang/Class<*>;", "Lcom/google/gson/JsonSerializer<*>;", "Lcom/google/gson/JsonDeserializer<*>;", "LGSONTreeTypeAdapter;" };
  static const J2ObjcClassInfo _GSONTreeTypeAdapter_SingleTypeFactory = { "SingleTypeFactory", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x1a, 2, 5, 9, -1, -1, -1, -1 };
  return &_GSONTreeTypeAdapter_SingleTypeFactory;
}

@end

void GSONTreeTypeAdapter_SingleTypeFactory_initWithId_withGSONTypeToken_withBoolean_withIOSClass_(GSONTreeTypeAdapter_SingleTypeFactory *self, id typeAdapter, GSONTypeToken *exactType, jboolean matchRawType, IOSClass *hierarchyType) {
  NSObject_init(self);
  self->serializer_ = [GSONJsonSerializer_class_() isInstance:typeAdapter] ? (id<GSONJsonSerializer>) cast_check(typeAdapter, GSONJsonSerializer_class_()) : nil;
  self->deserializer_ = [GSONJsonDeserializer_class_() isInstance:typeAdapter] ? (id<GSONJsonDeserializer>) cast_check(typeAdapter, GSONJsonDeserializer_class_()) : nil;
  GSON_Gson_Preconditions_checkArgumentWithBoolean_(self->serializer_ != nil || self->deserializer_ != nil);
  self->exactType_ = exactType;
  self->matchRawType_ = matchRawType;
  self->hierarchyType_ = hierarchyType;
}

GSONTreeTypeAdapter_SingleTypeFactory *new_GSONTreeTypeAdapter_SingleTypeFactory_initWithId_withGSONTypeToken_withBoolean_withIOSClass_(id typeAdapter, GSONTypeToken *exactType, jboolean matchRawType, IOSClass *hierarchyType) {
  J2OBJC_NEW_IMPL(GSONTreeTypeAdapter_SingleTypeFactory, initWithId_withGSONTypeToken_withBoolean_withIOSClass_, typeAdapter, exactType, matchRawType, hierarchyType)
}

GSONTreeTypeAdapter_SingleTypeFactory *create_GSONTreeTypeAdapter_SingleTypeFactory_initWithId_withGSONTypeToken_withBoolean_withIOSClass_(id typeAdapter, GSONTypeToken *exactType, jboolean matchRawType, IOSClass *hierarchyType) {
  J2OBJC_CREATE_IMPL(GSONTreeTypeAdapter_SingleTypeFactory, initWithId_withGSONTypeToken_withBoolean_withIOSClass_, typeAdapter, exactType, matchRawType, hierarchyType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GSONTreeTypeAdapter_SingleTypeFactory)

@implementation GSONTreeTypeAdapter_GsonContextImpl

- (instancetype)initWithGSONTreeTypeAdapter:(GSONTreeTypeAdapter *)outer$ {
  GSONTreeTypeAdapter_GsonContextImpl_initWithGSONTreeTypeAdapter_(self, outer$);
  return self;
}

- (GSONJsonElement *)serializeWithId:(id)src {
  return [((GSONGson *) nil_chk(this$0_->gson_)) toJsonTreeWithId:src];
}

- (GSONJsonElement *)serializeWithId:(id)src
             withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc {
  return [((GSONGson *) nil_chk(this$0_->gson_)) toJsonTreeWithId:src withJavaLangReflectType:typeOfSrc];
}

- (id)deserializeWithGSONJsonElement:(GSONJsonElement *)json
             withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT {
  return [((GSONGson *) nil_chk(this$0_->gson_)) fromJsonWithGSONJsonElement:json withJavaLangReflectType:typeOfT];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONJsonElement;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LGSONJsonElement;", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, 5, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithGSONTreeTypeAdapter:);
  methods[1].selector = @selector(serializeWithId:);
  methods[2].selector = @selector(serializeWithId:withJavaLangReflectType:);
  methods[3].selector = @selector(deserializeWithGSONJsonElement:withJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LGSONTreeTypeAdapter;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "serialize", "LNSObject;", "LNSObject;LJavaLangReflectType;", "deserialize", "LGSONJsonElement;LJavaLangReflectType;", "LGSONJsonParseException;", "<R:Ljava/lang/Object;>(Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;)TR;", "Lcom/google/gson/internal/bind/TreeTypeAdapter<TT;>;", "LGSONTreeTypeAdapter;" };
  static const J2ObjcClassInfo _GSONTreeTypeAdapter_GsonContextImpl = { "GsonContextImpl", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x12, 4, 1, 8, -1, -1, -1, -1 };
  return &_GSONTreeTypeAdapter_GsonContextImpl;
}

@end

void GSONTreeTypeAdapter_GsonContextImpl_initWithGSONTreeTypeAdapter_(GSONTreeTypeAdapter_GsonContextImpl *self, GSONTreeTypeAdapter *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

GSONTreeTypeAdapter_GsonContextImpl *new_GSONTreeTypeAdapter_GsonContextImpl_initWithGSONTreeTypeAdapter_(GSONTreeTypeAdapter *outer$) {
  J2OBJC_NEW_IMPL(GSONTreeTypeAdapter_GsonContextImpl, initWithGSONTreeTypeAdapter_, outer$)
}

GSONTreeTypeAdapter_GsonContextImpl *create_GSONTreeTypeAdapter_GsonContextImpl_initWithGSONTreeTypeAdapter_(GSONTreeTypeAdapter *outer$) {
  J2OBJC_CREATE_IMPL(GSONTreeTypeAdapter_GsonContextImpl, initWithGSONTreeTypeAdapter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GSONTreeTypeAdapter_GsonContextImpl)
