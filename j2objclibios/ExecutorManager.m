//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/github/howtobuildapp/libservice/execute/ExecutorManager.java
//

#include "Callback.h"
#include "ExecuteInterface.h"
#include "ExecutorManager.h"
#include "J2ObjC_source.h"
#include "Request.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface HTBAExecutorManager () {
 @public
  id<JavaUtilMap> registerInfo_;
}

@end

J2OBJC_FIELD_SETTER(HTBAExecutorManager, registerInfo_, id<JavaUtilMap>)

inline HTBAExecutorManager *HTBAExecutorManager_get_defaultInstance();
inline HTBAExecutorManager *HTBAExecutorManager_set_defaultInstance(HTBAExecutorManager *value);
static HTBAExecutorManager *HTBAExecutorManager_defaultInstance;
J2OBJC_STATIC_FIELD_OBJ(HTBAExecutorManager, defaultInstance, HTBAExecutorManager *)

@implementation HTBAExecutorManager

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  HTBAExecutorManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (HTBAExecutorManager *)defaultManager {
  return HTBAExecutorManager_defaultManager();
}

- (void)registerExecutorForKeyWithNSString:(NSString *)key
                  withHTBAExecuteInterface:(id<HTBAExecuteInterface>)executor {
  if (key == nil || executor == nil) {
    return;
  }
  (void) [((id<JavaUtilMap>) nil_chk(registerInfo_)) putWithId:key withId:executor];
}

- (void)unregisterExecutorForKeyWithNSString:(NSString *)key {
  if (key == nil) {
    return;
  }
  (void) [((id<JavaUtilMap>) nil_chk(registerInfo_)) removeWithId:key];
}

- (void)registerExecutorForRequestWithHTBARequest:(HTBARequest *)req
                         withHTBAExecuteInterface:(id<HTBAExecuteInterface>)executor {
  if (req == nil || executor == nil) {
    return;
  }
  [self registerExecutorForKeyWithNSString:[req getKindString] withHTBAExecuteInterface:executor];
}

- (void)unregisterExecutorForRequestWithHTBARequest:(HTBARequest *)req {
  if (req == nil) {
    return;
  }
  [self unregisterExecutorForKeyWithNSString:[req getKindString]];
}

- (void)executeRequestWithHTBARequest:(HTBARequest *)req
                               withId:(id)sender
                     withHTBACallback:(HTBACallback *)callback {
  if (req == nil) {
    return;
  }
  NSString *key = [req getKindString];
  id<HTBAExecuteInterface> executor = [((id<JavaUtilMap>) nil_chk(registerInfo_)) getWithId:key];
  if (executor == nil) {
    return;
  }
  [executor executeRequestWithHTBARequest:req withId:sender withHTBACallback:callback];
}

- (void)cancelWithId:(id)sender {
  if (sender == nil) {
    return;
  }
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(registerInfo_)) entrySet])) {
    [((id<HTBAExecuteInterface>) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) cancelWithId:sender];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHTBAExecutorManager;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(defaultManager);
  methods[2].selector = @selector(registerExecutorForKeyWithNSString:withHTBAExecuteInterface:);
  methods[3].selector = @selector(unregisterExecutorForKeyWithNSString:);
  methods[4].selector = @selector(registerExecutorForRequestWithHTBARequest:withHTBAExecuteInterface:);
  methods[5].selector = @selector(unregisterExecutorForRequestWithHTBARequest:);
  methods[6].selector = @selector(executeRequestWithHTBARequest:withId:withHTBACallback:);
  methods[7].selector = @selector(cancelWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "registerInfo_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 12, -1 },
    { "defaultInstance", "LHTBAExecutorManager;", .constantValue.asLong = 0, 0xa, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "registerExecutorForKey", "LNSString;LHTBAExecuteInterface;", "unregisterExecutorForKey", "LNSString;", "registerExecutorForRequest", "LHTBARequest;LHTBAExecuteInterface;", "unregisterExecutorForRequest", "LHTBARequest;", "executeRequest", "LHTBARequest;LNSObject;LHTBACallback;", "cancel", "LNSObject;", "Ljava/util/Map<Ljava/lang/String;Lcom/github/howtobuildapp/libservice/execute/ExecuteInterface;>;", &HTBAExecutorManager_defaultInstance };
  static const J2ObjcClassInfo _HTBAExecutorManager = { "ExecutorManager", "com.github.howtobuildapp.libservice.execute", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, -1, -1, -1, -1 };
  return &_HTBAExecutorManager;
}

@end

void HTBAExecutorManager_init(HTBAExecutorManager *self) {
  NSObject_init(self);
  self->registerInfo_ = new_JavaUtilHashMap_init();
}

HTBAExecutorManager *new_HTBAExecutorManager_init() {
  J2OBJC_NEW_IMPL(HTBAExecutorManager, init)
}

HTBAExecutorManager *create_HTBAExecutorManager_init() {
  J2OBJC_CREATE_IMPL(HTBAExecutorManager, init)
}

HTBAExecutorManager *HTBAExecutorManager_defaultManager() {
  HTBAExecutorManager_initialize();
  if (HTBAExecutorManager_defaultInstance == nil) {
    HTBAExecutorManager_defaultInstance = new_HTBAExecutorManager_init();
  }
  return HTBAExecutorManager_defaultInstance;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HTBAExecutorManager)
