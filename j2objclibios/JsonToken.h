//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/stream/JsonToken.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JsonToken")
#ifdef RESTRICT_JsonToken
#define INCLUDE_ALL_JsonToken 0
#else
#define INCLUDE_ALL_JsonToken 1
#endif
#undef RESTRICT_JsonToken

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (GSONJsonToken_) && (INCLUDE_ALL_JsonToken || defined(INCLUDE_GSONJsonToken))
#define GSONJsonToken_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, GSONJsonToken_Enum) {
  GSONJsonToken_Enum_BEGIN_ARRAY = 0,
  GSONJsonToken_Enum_END_ARRAY = 1,
  GSONJsonToken_Enum_BEGIN_OBJECT = 2,
  GSONJsonToken_Enum_END_OBJECT = 3,
  GSONJsonToken_Enum_NAME = 4,
  GSONJsonToken_Enum_STRING = 5,
  GSONJsonToken_Enum_NUMBER = 6,
  GSONJsonToken_Enum_BOOLEAN = 7,
  GSONJsonToken_Enum_NULL = 8,
  GSONJsonToken_Enum_END_DOCUMENT = 9,
};

/*!
 @brief A structure, name or value type in a JSON-encoded string.
 @author Jesse Wilson
 @since 1.6
 */
@interface GSONJsonToken : JavaLangEnum

#pragma mark Public

+ (GSONJsonToken *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(GSONJsonToken)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT GSONJsonToken *GSONJsonToken_values_[];

/*!
 @brief The opening of a JSON array.Written using <code>JsonWriter.beginArray</code>
  and read using <code>JsonReader.beginArray</code>.
 */
inline GSONJsonToken *GSONJsonToken_get_BEGIN_ARRAY();
J2OBJC_ENUM_CONSTANT(GSONJsonToken, BEGIN_ARRAY)

/*!
 @brief The closing of a JSON array.Written using <code>JsonWriter.endArray</code>
  and read using <code>JsonReader.endArray</code>.
 */
inline GSONJsonToken *GSONJsonToken_get_END_ARRAY();
J2OBJC_ENUM_CONSTANT(GSONJsonToken, END_ARRAY)

/*!
 @brief The opening of a JSON object.Written using <code>JsonWriter.beginObject</code>
  and read using <code>JsonReader.beginObject</code>.
 */
inline GSONJsonToken *GSONJsonToken_get_BEGIN_OBJECT();
J2OBJC_ENUM_CONSTANT(GSONJsonToken, BEGIN_OBJECT)

/*!
 @brief The closing of a JSON object.Written using <code>JsonWriter.endObject</code>
  and read using <code>JsonReader.endObject</code>.
 */
inline GSONJsonToken *GSONJsonToken_get_END_OBJECT();
J2OBJC_ENUM_CONSTANT(GSONJsonToken, END_OBJECT)

/*!
 @brief A JSON property name.Within objects, tokens alternate between names and
  their values.
 Written using <code>JsonWriter.name</code> and read using <code>JsonReader.nextName</code>
 */
inline GSONJsonToken *GSONJsonToken_get_NAME();
J2OBJC_ENUM_CONSTANT(GSONJsonToken, NAME)

/*!
 @brief A JSON string.
 */
inline GSONJsonToken *GSONJsonToken_get_STRING();
J2OBJC_ENUM_CONSTANT(GSONJsonToken, STRING)

/*!
 @brief A JSON number represented in this API by a Java <code>double</code>, <code>long</code>
 , or <code>int</code>.
 */
inline GSONJsonToken *GSONJsonToken_get_NUMBER();
J2OBJC_ENUM_CONSTANT(GSONJsonToken, NUMBER)

/*!
 @brief A JSON <code>true</code> or <code>false</code>.
 */
inline GSONJsonToken *GSONJsonToken_get_BOOLEAN();
J2OBJC_ENUM_CONSTANT(GSONJsonToken, BOOLEAN)

/*!
 @brief A JSON <code>null</code>.
 */
inline GSONJsonToken *GSONJsonToken_get_NULL();
J2OBJC_ENUM_CONSTANT(GSONJsonToken, NULL)

/*!
 @brief The end of the JSON stream.This sentinel value is returned by <code>JsonReader.peek()</code>
  to signal that the JSON-encoded value has no more
  tokens.
 */
inline GSONJsonToken *GSONJsonToken_get_END_DOCUMENT();
J2OBJC_ENUM_CONSTANT(GSONJsonToken, END_DOCUMENT)

FOUNDATION_EXPORT IOSObjectArray *GSONJsonToken_values();

FOUNDATION_EXPORT GSONJsonToken *GSONJsonToken_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT GSONJsonToken *GSONJsonToken_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(GSONJsonToken)

@compatibility_alias ComGoogleGsonStreamJsonToken GSONJsonToken;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JsonToken")
