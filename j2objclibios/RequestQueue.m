//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/github/howtobuildapp/libservice/execute/RequestQueue.java
//

#include "Callback.h"
#include "ExecuteInterface.h"
#include "J2ObjC_source.h"
#include "Request.h"
#include "RequestQueue.h"
#include "RequestQueueItem.h"
#include "Response.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface HTBARequestQueue () {
 @public
  id<HTBAExecuteInterface> realExecutor_;
  id<JavaUtilList> items_;
  id<JavaUtilList> executing_;
  jint maxCount_;
  jboolean isReady_;
}

- (void)mayExecute;

- (void)finishItemWithHTBARequestQueueItem:(HTBARequestQueueItem *)item
                          withHTBAResponse:(HTBAResponse *)resp;

@end

J2OBJC_FIELD_SETTER(HTBARequestQueue, realExecutor_, id<HTBAExecuteInterface>)
J2OBJC_FIELD_SETTER(HTBARequestQueue, items_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(HTBARequestQueue, executing_, id<JavaUtilList>)

__attribute__((unused)) static void HTBARequestQueue_mayExecute(HTBARequestQueue *self);

__attribute__((unused)) static void HTBARequestQueue_finishItemWithHTBARequestQueueItem_withHTBAResponse_(HTBARequestQueue *self, HTBARequestQueueItem *item, HTBAResponse *resp);

@interface HTBARequestQueue_1 : HTBACallback {
 @public
  HTBARequestQueue *this$0_;
  HTBARequestQueueItem *val$item_;
}

- (instancetype)initWithHTBARequestQueue:(HTBARequestQueue *)outer$
                withHTBARequestQueueItem:(HTBARequestQueueItem *)capture$0;

- (void)onCompleteWithHTBARequest:(HTBARequest *)req
                 withHTBAResponse:(HTBAResponse *)resp;

@end

J2OBJC_EMPTY_STATIC_INIT(HTBARequestQueue_1)

__attribute__((unused)) static void HTBARequestQueue_1_initWithHTBARequestQueue_withHTBARequestQueueItem_(HTBARequestQueue_1 *self, HTBARequestQueue *outer$, HTBARequestQueueItem *capture$0);

__attribute__((unused)) static HTBARequestQueue_1 *new_HTBARequestQueue_1_initWithHTBARequestQueue_withHTBARequestQueueItem_(HTBARequestQueue *outer$, HTBARequestQueueItem *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static HTBARequestQueue_1 *create_HTBARequestQueue_1_initWithHTBARequestQueue_withHTBARequestQueueItem_(HTBARequestQueue *outer$, HTBARequestQueueItem *capture$0);

@implementation HTBARequestQueue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  HTBARequestQueue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setRealExecutorWithHTBAExecuteInterface:(id<HTBAExecuteInterface>)realExecutor {
  self->realExecutor_ = realExecutor;
}

- (void)setMaxCountWithInt:(jint)maxCount {
  self->maxCount_ = maxCount;
}

- (void)suspend {
  isReady_ = false;
}

- (void)resume {
  isReady_ = true;
  HTBARequestQueue_mayExecute(self);
}

- (void)mayExecute {
  HTBARequestQueue_mayExecute(self);
}

- (void)finishItemWithHTBARequestQueueItem:(HTBARequestQueueItem *)item
                          withHTBAResponse:(HTBAResponse *)resp {
  HTBARequestQueue_finishItemWithHTBARequestQueueItem_withHTBAResponse_(self, item, resp);
}

- (void)executeRequestWithHTBARequest:(HTBARequest *)req
                               withId:(id)sender
                     withHTBACallback:(HTBACallback *)callback {
  HTBARequestQueueItem *item = new_HTBARequestQueueItem_init();
  [item setCallbackWithHTBACallback:callback];
  [item setEnqueueTimestampWithLong:JavaLangSystem_currentTimeMillis()];
  [item setRequestWithHTBARequest:req];
  [item setSenderWithId:sender];
  [((id<JavaUtilList>) nil_chk(items_)) addWithId:item];
  HTBARequestQueue_mayExecute(self);
}

- (void)cancelWithId:(id)sender {
  JavaUtilArrayList *rms = new_JavaUtilArrayList_init();
  for (HTBARequestQueueItem * __strong item in nil_chk(items_)) {
    if (sender == nil || sender == [((HTBARequestQueueItem *) nil_chk(item)) getSender]) {
      [rms addWithId:item];
    }
  }
  [((id<JavaUtilList>) nil_chk(executing_)) removeAllWithJavaUtilCollection:rms];
  [((id<JavaUtilList>) nil_chk(items_)) removeAllWithJavaUtilCollection:rms];
  HTBARequestQueue_mayExecute(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setRealExecutorWithHTBAExecuteInterface:);
  methods[2].selector = @selector(setMaxCountWithInt:);
  methods[3].selector = @selector(suspend);
  methods[4].selector = @selector(resume);
  methods[5].selector = @selector(mayExecute);
  methods[6].selector = @selector(finishItemWithHTBARequestQueueItem:withHTBAResponse:);
  methods[7].selector = @selector(executeRequestWithHTBARequest:withId:withHTBACallback:);
  methods[8].selector = @selector(cancelWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "realExecutor_", "LHTBAExecuteInterface;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "items_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "executing_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "maxCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isReady_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setRealExecutor", "LHTBAExecuteInterface;", "setMaxCount", "I", "finishItem", "LHTBARequestQueueItem;LHTBAResponse;", "executeRequest", "LHTBARequest;LNSObject;LHTBACallback;", "cancel", "LNSObject;", "Ljava/util/List<Lcom/github/howtobuildapp/libservice/execute/RequestQueueItem;>;" };
  static const J2ObjcClassInfo _HTBARequestQueue = { "RequestQueue", "com.github.howtobuildapp.libservice.execute", ptrTable, methods, fields, 7, 0x1, 9, 5, -1, -1, -1, -1, -1 };
  return &_HTBARequestQueue;
}

@end

void HTBARequestQueue_init(HTBARequestQueue *self) {
  NSObject_init(self);
  self->items_ = new_JavaUtilArrayList_init();
  self->executing_ = new_JavaUtilArrayList_init();
  self->maxCount_ = 5;
}

HTBARequestQueue *new_HTBARequestQueue_init() {
  J2OBJC_NEW_IMPL(HTBARequestQueue, init)
}

HTBARequestQueue *create_HTBARequestQueue_init() {
  J2OBJC_CREATE_IMPL(HTBARequestQueue, init)
}

void HTBARequestQueue_mayExecute(HTBARequestQueue *self) {
  if (self->realExecutor_ == nil || !self->isReady_ || [((id<JavaUtilList>) nil_chk(self->items_)) size] < 1 || [((id<JavaUtilList>) nil_chk(self->items_)) size] == [((id<JavaUtilList>) nil_chk(self->executing_)) size] || [((id<JavaUtilList>) nil_chk(self->executing_)) size] >= self->maxCount_) {
    return;
  }
  jlong now = JavaLangSystem_currentTimeMillis();
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->items_)) size]; i++) {
    HTBARequestQueueItem *item = [((id<JavaUtilList>) nil_chk(self->items_)) getWithInt:i];
    if ([((id<JavaUtilList>) nil_chk(self->executing_)) containsWithId:item] || [((id<JavaUtilList>) nil_chk(self->executing_)) size] >= self->maxCount_ || now - [((HTBARequestQueueItem *) nil_chk(item)) getEnqueueTimestamp] > [((HTBARequest *) nil_chk([item getRequest])) getTimeout] * 1000) {
      continue;
    }
    [((HTBARequestQueueItem *) nil_chk(item)) setStartTimestampWithLong:now];
    [((id<JavaUtilList>) nil_chk(self->executing_)) addWithId:item];
    [((id<HTBAExecuteInterface>) nil_chk(self->realExecutor_)) executeRequestWithHTBARequest:[item getRequest] withId:[item getSender] withHTBACallback:new_HTBARequestQueue_1_initWithHTBARequestQueue_withHTBARequestQueueItem_(self, item)];
  }
}

void HTBARequestQueue_finishItemWithHTBARequestQueueItem_withHTBAResponse_(HTBARequestQueue *self, HTBARequestQueueItem *item, HTBAResponse *resp) {
  [((id<JavaUtilList>) nil_chk(self->executing_)) removeWithId:item];
  [((id<JavaUtilList>) nil_chk(self->items_)) removeWithId:item];
  if ([((HTBARequestQueueItem *) nil_chk(item)) getCallback] != nil) {
    [((HTBACallback *) nil_chk([item getCallback])) onCompleteWithHTBARequest:[item getRequest] withHTBAResponse:resp];
  }
  HTBARequestQueue_mayExecute(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HTBARequestQueue)

@implementation HTBARequestQueue_1

- (instancetype)initWithHTBARequestQueue:(HTBARequestQueue *)outer$
                withHTBARequestQueueItem:(HTBARequestQueueItem *)capture$0 {
  HTBARequestQueue_1_initWithHTBARequestQueue_withHTBARequestQueueItem_(self, outer$, capture$0);
  return self;
}

- (void)onCompleteWithHTBARequest:(HTBARequest *)req
                 withHTBAResponse:(HTBAResponse *)resp {
  HTBARequestQueue_finishItemWithHTBARequestQueueItem_withHTBAResponse_(this$0_, val$item_, resp);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithHTBARequestQueue:withHTBARequestQueueItem:);
  methods[1].selector = @selector(onCompleteWithHTBARequest:withHTBAResponse:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LHTBARequestQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$item_", "LHTBARequestQueueItem;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onComplete", "LHTBARequest;LHTBAResponse;", "LHTBARequestQueue;", "mayExecute" };
  static const J2ObjcClassInfo _HTBARequestQueue_1 = { "", "com.github.howtobuildapp.libservice.execute", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_HTBARequestQueue_1;
}

@end

void HTBARequestQueue_1_initWithHTBARequestQueue_withHTBARequestQueueItem_(HTBARequestQueue_1 *self, HTBARequestQueue *outer$, HTBARequestQueueItem *capture$0) {
  self->this$0_ = outer$;
  self->val$item_ = capture$0;
  HTBACallback_init(self);
}

HTBARequestQueue_1 *new_HTBARequestQueue_1_initWithHTBARequestQueue_withHTBARequestQueueItem_(HTBARequestQueue *outer$, HTBARequestQueueItem *capture$0) {
  J2OBJC_NEW_IMPL(HTBARequestQueue_1, initWithHTBARequestQueue_withHTBARequestQueueItem_, outer$, capture$0)
}

HTBARequestQueue_1 *create_HTBARequestQueue_1_initWithHTBARequestQueue_withHTBARequestQueueItem_(HTBARequestQueue *outer$, HTBARequestQueueItem *capture$0) {
  J2OBJC_CREATE_IMPL(HTBARequestQueue_1, initWithHTBARequestQueue_withHTBARequestQueueItem_, outer$, capture$0)
}
