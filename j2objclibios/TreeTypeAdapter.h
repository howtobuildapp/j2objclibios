//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/internal/bind/TreeTypeAdapter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_TreeTypeAdapter")
#ifdef RESTRICT_TreeTypeAdapter
#define INCLUDE_ALL_TreeTypeAdapter 0
#else
#define INCLUDE_ALL_TreeTypeAdapter 1
#endif
#undef RESTRICT_TreeTypeAdapter

#if !defined (GSONTreeTypeAdapter_) && (INCLUDE_ALL_TreeTypeAdapter || defined(INCLUDE_GSONTreeTypeAdapter))
#define GSONTreeTypeAdapter_

#define RESTRICT_TypeAdapter 1
#define INCLUDE_GSONTypeAdapter 1
#include "TypeAdapter.h"

@class GSONGson;
@class GSONJsonReader;
@class GSONJsonWriter;
@class GSONTypeToken;
@class IOSClass;
@protocol GSONJsonDeserializer;
@protocol GSONJsonSerializer;
@protocol GSONTypeAdapterFactory;

/*!
 @brief Adapts a Gson 1.x tree-style adapter as a streaming TypeAdapter.Since the
  tree adapter may be serialization-only or deserialization-only, this class
  has a facility to lookup a delegate type adapter on demand.
 */
@interface GSONTreeTypeAdapter : GSONTypeAdapter {
 @public
  GSONGson *gson_;
}

#pragma mark Public

- (instancetype)initWithGSONJsonSerializer:(id<GSONJsonSerializer>)serializer
                  withGSONJsonDeserializer:(id<GSONJsonDeserializer>)deserializer
                              withGSONGson:(GSONGson *)gson
                         withGSONTypeToken:(GSONTypeToken *)typeToken
                withGSONTypeAdapterFactory:(id<GSONTypeAdapterFactory>)skipPast;

/*!
 @brief Returns a new factory that will match each type against <code>exactType</code>.
 */
+ (id<GSONTypeAdapterFactory>)newFactoryWithGSONTypeToken:(GSONTypeToken *)exactType
                                                   withId:(id)typeAdapter OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new factory that will match each type and its raw type against 
 <code>exactType</code>.
 */
+ (id<GSONTypeAdapterFactory>)newFactoryWithMatchRawTypeWithGSONTypeToken:(GSONTypeToken *)exactType
                                                                   withId:(id)typeAdapter OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new factory that will match each type's raw type for assignability
  to <code>hierarchyType</code>.
 */
+ (id<GSONTypeAdapterFactory>)newTypeHierarchyFactoryWithIOSClass:(IOSClass *)hierarchyType
                                                           withId:(id)typeAdapter OBJC_METHOD_FAMILY_NONE;

- (id)readWithGSONJsonReader:(GSONJsonReader *)inArg;

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONTreeTypeAdapter)

J2OBJC_FIELD_SETTER(GSONTreeTypeAdapter, gson_, GSONGson *)

FOUNDATION_EXPORT void GSONTreeTypeAdapter_initWithGSONJsonSerializer_withGSONJsonDeserializer_withGSONGson_withGSONTypeToken_withGSONTypeAdapterFactory_(GSONTreeTypeAdapter *self, id<GSONJsonSerializer> serializer, id<GSONJsonDeserializer> deserializer, GSONGson *gson, GSONTypeToken *typeToken, id<GSONTypeAdapterFactory> skipPast);

FOUNDATION_EXPORT GSONTreeTypeAdapter *new_GSONTreeTypeAdapter_initWithGSONJsonSerializer_withGSONJsonDeserializer_withGSONGson_withGSONTypeToken_withGSONTypeAdapterFactory_(id<GSONJsonSerializer> serializer, id<GSONJsonDeserializer> deserializer, GSONGson *gson, GSONTypeToken *typeToken, id<GSONTypeAdapterFactory> skipPast) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GSONTreeTypeAdapter *create_GSONTreeTypeAdapter_initWithGSONJsonSerializer_withGSONJsonDeserializer_withGSONGson_withGSONTypeToken_withGSONTypeAdapterFactory_(id<GSONJsonSerializer> serializer, id<GSONJsonDeserializer> deserializer, GSONGson *gson, GSONTypeToken *typeToken, id<GSONTypeAdapterFactory> skipPast);

FOUNDATION_EXPORT id<GSONTypeAdapterFactory> GSONTreeTypeAdapter_newFactoryWithGSONTypeToken_withId_(GSONTypeToken *exactType, id typeAdapter);

FOUNDATION_EXPORT id<GSONTypeAdapterFactory> GSONTreeTypeAdapter_newFactoryWithMatchRawTypeWithGSONTypeToken_withId_(GSONTypeToken *exactType, id typeAdapter);

FOUNDATION_EXPORT id<GSONTypeAdapterFactory> GSONTreeTypeAdapter_newTypeHierarchyFactoryWithIOSClass_withId_(IOSClass *hierarchyType, id typeAdapter);

J2OBJC_TYPE_LITERAL_HEADER(GSONTreeTypeAdapter)

@compatibility_alias ComGoogleGsonInternalBindTreeTypeAdapter GSONTreeTypeAdapter;

#endif

#pragma pop_macro("INCLUDE_ALL_TreeTypeAdapter")
