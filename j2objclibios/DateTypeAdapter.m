//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/internal/bind/DateTypeAdapter.java
//

#include "DateTypeAdapter.h"
#include "Gson.h"
#include "IOSClass.h"
#include "ISO8601Utils.h"
#include "J2ObjC_source.h"
#include "JavaVersion.h"
#include "JsonReader.h"
#include "JsonSyntaxException.h"
#include "JsonToken.h"
#include "JsonWriter.h"
#include "PreJava9DateFormatProvider.h"
#include "TypeAdapter.h"
#include "TypeAdapterFactory.h"
#include "TypeToken.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface GSONDateTypeAdapter () {
 @public
  /*!
   @brief List of 1 or more different date formats used for de-serialization attempts.
   The first of them (default US format) is used for serialization as well.
   */
  id<JavaUtilList> dateFormats_;
}

- (JavaUtilDate *)deserializeToDateWithNSString:(NSString *)json;

@end

J2OBJC_FIELD_SETTER(GSONDateTypeAdapter, dateFormats_, id<JavaUtilList>)

__attribute__((unused)) static JavaUtilDate *GSONDateTypeAdapter_deserializeToDateWithNSString_(GSONDateTypeAdapter *self, NSString *json);

@interface GSONDateTypeAdapter_1 : NSObject < GSONTypeAdapterFactory >

- (instancetype)init;

- (GSONTypeAdapter *)createWithGSONGson:(GSONGson *)gson
                      withGSONTypeToken:(GSONTypeToken *)typeToken;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONDateTypeAdapter_1)

__attribute__((unused)) static void GSONDateTypeAdapter_1_init(GSONDateTypeAdapter_1 *self);

__attribute__((unused)) static GSONDateTypeAdapter_1 *new_GSONDateTypeAdapter_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static GSONDateTypeAdapter_1 *create_GSONDateTypeAdapter_1_init();

J2OBJC_INITIALIZED_DEFN(GSONDateTypeAdapter)

id<GSONTypeAdapterFactory> GSONDateTypeAdapter_FACTORY;

@implementation GSONDateTypeAdapter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONDateTypeAdapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaUtilDate *)readWithGSONJsonReader:(GSONJsonReader *)inArg {
  if ([((GSONJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GSONJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  return GSONDateTypeAdapter_deserializeToDateWithNSString_(self, [inArg nextString]);
}

- (JavaUtilDate *)deserializeToDateWithNSString:(NSString *)json {
  return GSONDateTypeAdapter_deserializeToDateWithNSString_(self, json);
}

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(JavaUtilDate *)value {
  @synchronized(self) {
    if (value == nil) {
      (void) [((GSONJsonWriter *) nil_chk(outArg)) nullValue];
      return;
    }
    NSString *dateFormatAsString = [((JavaTextDateFormat *) nil_chk([((id<JavaUtilList>) nil_chk(dateFormats_)) getWithInt:0])) formatWithJavaUtilDate:value];
    (void) [((GSONJsonWriter *) nil_chk(outArg)) valueWithNSString:dateFormatAsString];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x22, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 6, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readWithGSONJsonReader:);
  methods[2].selector = @selector(deserializeToDateWithNSString:);
  methods[3].selector = @selector(writeWithGSONJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FACTORY", "LGSONTypeAdapterFactory;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "dateFormats_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "read", "LGSONJsonReader;", "LJavaIoIOException;", "deserializeToDate", "LNSString;", "write", "LGSONJsonWriter;LJavaUtilDate;", &GSONDateTypeAdapter_FACTORY, "Ljava/util/List<Ljava/text/DateFormat;>;", "Lcom/google/gson/TypeAdapter<Ljava/util/Date;>;" };
  static const J2ObjcClassInfo _GSONDateTypeAdapter = { "DateTypeAdapter", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x11, 4, 2, -1, -1, -1, 9, -1 };
  return &_GSONDateTypeAdapter;
}

+ (void)initialize {
  if (self == [GSONDateTypeAdapter class]) {
    GSONDateTypeAdapter_FACTORY = new_GSONDateTypeAdapter_1_init();
    J2OBJC_SET_INITIALIZED(GSONDateTypeAdapter)
  }
}

@end

void GSONDateTypeAdapter_init(GSONDateTypeAdapter *self) {
  GSONTypeAdapter_init(self);
  self->dateFormats_ = new_JavaUtilArrayList_init();
  [self->dateFormats_ addWithId:JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_(JavaTextDateFormat_DEFAULT, JavaTextDateFormat_DEFAULT, JreLoadStatic(JavaUtilLocale, US))];
  if (![((JavaUtilLocale *) nil_chk(JavaUtilLocale_getDefault())) isEqual:JreLoadStatic(JavaUtilLocale, US)]) {
    [self->dateFormats_ addWithId:JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_(JavaTextDateFormat_DEFAULT, JavaTextDateFormat_DEFAULT)];
  }
  if (GSONJavaVersion_isJava9OrLater()) {
    [self->dateFormats_ addWithId:GSONPreJava9DateFormatProvider_getUSDateTimeFormatWithInt_withInt_(JavaTextDateFormat_DEFAULT, JavaTextDateFormat_DEFAULT)];
  }
}

GSONDateTypeAdapter *new_GSONDateTypeAdapter_init() {
  J2OBJC_NEW_IMPL(GSONDateTypeAdapter, init)
}

GSONDateTypeAdapter *create_GSONDateTypeAdapter_init() {
  J2OBJC_CREATE_IMPL(GSONDateTypeAdapter, init)
}

JavaUtilDate *GSONDateTypeAdapter_deserializeToDateWithNSString_(GSONDateTypeAdapter *self, NSString *json) {
  @synchronized(self) {
    for (JavaTextDateFormat * __strong dateFormat in nil_chk(self->dateFormats_)) {
      @try {
        return [((JavaTextDateFormat *) nil_chk(dateFormat)) parseWithNSString:json];
      }
      @catch (JavaTextParseException *ignored) {
      }
    }
    @try {
      return GSONISO8601Utils_parseWithNSString_withJavaTextParsePosition_(json, new_JavaTextParsePosition_initWithInt_(0));
    }
    @catch (JavaTextParseException *e) {
      @throw new_GSONJsonSyntaxException_initWithNSString_withJavaLangThrowable_(json, e);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GSONDateTypeAdapter)

@implementation GSONDateTypeAdapter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONDateTypeAdapter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (GSONTypeAdapter *)createWithGSONGson:(GSONGson *)gson
                      withGSONTypeToken:(GSONTypeToken *)typeToken {
  return [((GSONTypeToken *) nil_chk(typeToken)) getRawType] == JavaUtilDate_class_() ? new_GSONDateTypeAdapter_init() : nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONTypeAdapter;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createWithGSONGson:withGSONTypeToken:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "create", "LGSONGson;LGSONTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "LGSONDateTypeAdapter;" };
  static const J2ObjcClassInfo _GSONDateTypeAdapter_1 = { "", "com.google.gson.internal.bind", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, -1, -1 };
  return &_GSONDateTypeAdapter_1;
}

@end

void GSONDateTypeAdapter_1_init(GSONDateTypeAdapter_1 *self) {
  NSObject_init(self);
}

GSONDateTypeAdapter_1 *new_GSONDateTypeAdapter_1_init() {
  J2OBJC_NEW_IMPL(GSONDateTypeAdapter_1, init)
}

GSONDateTypeAdapter_1 *create_GSONDateTypeAdapter_1_init() {
  J2OBJC_CREATE_IMPL(GSONDateTypeAdapter_1, init)
}
