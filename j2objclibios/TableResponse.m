//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/github/howtobuildapp/libservice/execute/TableResponse.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Response.h"
#include "TableInterface.h"
#include "TableResponse.h"

@implementation HTBATableResponse

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  HTBATableResponse_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<HTBATableInterface>)getTableResult {
  id ret = [super getResult];
  if (ret != nil && [HTBATableInterface_class_() isInstance:ret]) {
    return (id<HTBATableInterface>) cast_check(ret, HTBATableInterface_class_());
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHTBATableInterface;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getTableResult);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _HTBATableResponse = { "TableResponse", "com.github.howtobuildapp.libservice.execute", NULL, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_HTBATableResponse;
}

@end

void HTBATableResponse_init(HTBATableResponse *self) {
  HTBAResponse_init(self);
}

HTBATableResponse *new_HTBATableResponse_init() {
  J2OBJC_NEW_IMPL(HTBATableResponse, init)
}

HTBATableResponse *create_HTBATableResponse_init() {
  J2OBJC_CREATE_IMPL(HTBATableResponse, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HTBATableResponse)
