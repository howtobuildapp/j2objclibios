//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/github/howtobuildapp/libvm/ViewModel.java
//

#include "J2ObjC_source.h"
#include "ViewInterface.h"
#include "ViewModel.h"

@interface HTBAViewModel () {
 @public
  __unsafe_unretained id<HTBAViewInterface> view_;
}

@end

inline jint HTBAViewModel_get_serial();
inline jint HTBAViewModel_set_serial(jint value);
inline jint *HTBAViewModel_getRef_serial();
static jint HTBAViewModel_serial = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(HTBAViewModel, serial, jint)

@implementation HTBAViewModel

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  HTBAViewModel_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)getNextSerial {
  return HTBAViewModel_getNextSerial();
}

- (void)showLoading {
  if (self->view_ != nil) {
    [self->view_ showLoading];
  }
}

- (void)hideLoading {
  if (self->view_ != nil) {
    [self->view_ hideLoading];
  }
}

- (void)showHudWithNSString:(NSString *)msg {
  if (self->view_ != nil) {
    [self->view_ showHudWithNSString:msg];
  }
}

- (void)showAlertWithNSString:(NSString *)title
                 withNSString:(NSString *)msg {
  if (self->view_ != nil) {
    [self->view_ showAlertWithNSString:title withNSString:msg];
  }
}

- (void)operationFinishedWithInt:(jint)serial
                     withBoolean:(jboolean)isSucceed {
  if (self->view_ != nil) {
    [self->view_ operationFinishedWithInt:serial withBoolean:isSucceed];
  }
}

- (void)setViewWithHTBAViewInterface:(id<HTBAViewInterface>)view {
  self->view_ = view;
}

- (void)cancel {
  self->view_ = nil;
}

- (void)__javaClone:(HTBAViewModel *)original {
  [super __javaClone:original];
  JreRelease(view_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getNextSerial);
  methods[2].selector = @selector(showLoading);
  methods[3].selector = @selector(hideLoading);
  methods[4].selector = @selector(showHudWithNSString:);
  methods[5].selector = @selector(showAlertWithNSString:withNSString:);
  methods[6].selector = @selector(operationFinishedWithInt:withBoolean:);
  methods[7].selector = @selector(setViewWithHTBAViewInterface:);
  methods[8].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "view_", "LHTBAViewInterface;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serial", "I", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "showHud", "LNSString;", "showAlert", "LNSString;LNSString;", "operationFinished", "IZ", "setView", "LHTBAViewInterface;", &HTBAViewModel_serial };
  static const J2ObjcClassInfo _HTBAViewModel = { "ViewModel", "com.github.howtobuildapp.libvm", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_HTBAViewModel;
}

@end

void HTBAViewModel_init(HTBAViewModel *self) {
  NSObject_init(self);
  self->view_ = nil;
}

HTBAViewModel *new_HTBAViewModel_init() {
  J2OBJC_NEW_IMPL(HTBAViewModel, init)
}

HTBAViewModel *create_HTBAViewModel_init() {
  J2OBJC_CREATE_IMPL(HTBAViewModel, init)
}

jint HTBAViewModel_getNextSerial() {
  HTBAViewModel_initialize();
  HTBAViewModel_serial++;
  if (HTBAViewModel_serial < 100000000) {
    return HTBAViewModel_serial;
  }
  HTBAViewModel_serial = 0;
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HTBAViewModel)
