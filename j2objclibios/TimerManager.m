//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/github/howtobuildapp/libservice/platform/TimerManager.java
//

#include "J2ObjC_source.h"
#include "TimerInterface.h"
#include "TimerManager.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"

@interface HTBATimerManager () {
 @public
  JavaUtilArrayList *items_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(HTBATimerManager, items_, JavaUtilArrayList *)

inline HTBATimerManager *HTBATimerManager_get_defaultInstance();
inline HTBATimerManager *HTBATimerManager_set_defaultInstance(HTBATimerManager *value);
static HTBATimerManager *HTBATimerManager_defaultInstance;
J2OBJC_STATIC_FIELD_OBJ(HTBATimerManager, defaultInstance, HTBATimerManager *)

__attribute__((unused)) static void HTBATimerManager_init(HTBATimerManager *self);

__attribute__((unused)) static HTBATimerManager *new_HTBATimerManager_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static HTBATimerManager *create_HTBATimerManager_init();

@interface HTBATimerManager_TimerItem : NSObject {
 @public
  id<HTBATimerInterface> target_;
  jint delay_;
  jboolean repeat_;
  jlong timestamp_;
}

- (instancetype)initWithHTBATimerManager:(HTBATimerManager *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(HTBATimerManager_TimerItem)

J2OBJC_FIELD_SETTER(HTBATimerManager_TimerItem, target_, id<HTBATimerInterface>)

__attribute__((unused)) static void HTBATimerManager_TimerItem_initWithHTBATimerManager_(HTBATimerManager_TimerItem *self, HTBATimerManager *outer$);

__attribute__((unused)) static HTBATimerManager_TimerItem *new_HTBATimerManager_TimerItem_initWithHTBATimerManager_(HTBATimerManager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static HTBATimerManager_TimerItem *create_HTBATimerManager_TimerItem_initWithHTBATimerManager_(HTBATimerManager *outer$);

J2OBJC_TYPE_LITERAL_HEADER(HTBATimerManager_TimerItem)

@implementation HTBATimerManager

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  HTBATimerManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (HTBATimerManager *)defaultManager {
  return HTBATimerManager_defaultManager();
}

- (void)scheduleWithInt:(jint)delay
            withBoolean:(jboolean)repeat
 withHTBATimerInterface:(id<HTBATimerInterface>)target {
  if (target == nil) {
    return;
  }
  HTBATimerManager_TimerItem *item = new_HTBATimerManager_TimerItem_initWithHTBATimerManager_(self);
  item->target_ = target;
  item->delay_ = delay;
  item->repeat_ = repeat;
  item->timestamp_ = JavaLangSystem_currentTimeMillis();
  [((JavaUtilArrayList *) nil_chk(items_)) addWithId:item];
}

- (void)removeWithHTBATimerInterface:(id<HTBATimerInterface>)target {
  if (target == nil) {
    return;
  }
  JavaUtilArrayList *rms = new_JavaUtilArrayList_init();
  for (HTBATimerManager_TimerItem * __strong item in nil_chk(items_)) {
    if (((HTBATimerManager_TimerItem *) nil_chk(item))->target_ == target) {
      [rms addWithId:item];
    }
  }
  [items_ removeAllWithJavaUtilCollection:rms];
}

- (void)tickFromMainThread {
  jlong now = JavaLangSystem_currentTimeMillis();
  JavaUtilArrayList *rms = new_JavaUtilArrayList_init();
  for (HTBATimerManager_TimerItem * __strong item in nil_chk(items_)) {
    if (now - ((HTBATimerManager_TimerItem *) nil_chk(item))->timestamp_ > item->delay_ * 1000) {
      [((id<HTBATimerInterface>) nil_chk(item->target_)) fired];
      if (item->repeat_) {
        item->timestamp_ = now;
      }
      else {
        [rms addWithId:item];
      }
    }
  }
  [items_ removeAllWithJavaUtilCollection:rms];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHTBATimerManager;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(defaultManager);
  methods[2].selector = @selector(scheduleWithInt:withBoolean:withHTBATimerInterface:);
  methods[3].selector = @selector(removeWithHTBATimerInterface:);
  methods[4].selector = @selector(tickFromMainThread);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "items_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
    { "defaultInstance", "LHTBATimerManager;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "schedule", "IZLHTBATimerInterface;", "remove", "LHTBATimerInterface;", "Ljava/util/ArrayList<Lcom/github/howtobuildapp/libservice/platform/TimerManager$TimerItem;>;", &HTBATimerManager_defaultInstance, "LHTBATimerManager_TimerItem;" };
  static const J2ObjcClassInfo _HTBATimerManager = { "TimerManager", "com.github.howtobuildapp.libservice.platform", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, 6, -1, -1, -1 };
  return &_HTBATimerManager;
}

@end

void HTBATimerManager_init(HTBATimerManager *self) {
  NSObject_init(self);
  self->items_ = new_JavaUtilArrayList_init();
}

HTBATimerManager *new_HTBATimerManager_init() {
  J2OBJC_NEW_IMPL(HTBATimerManager, init)
}

HTBATimerManager *create_HTBATimerManager_init() {
  J2OBJC_CREATE_IMPL(HTBATimerManager, init)
}

HTBATimerManager *HTBATimerManager_defaultManager() {
  HTBATimerManager_initialize();
  if (HTBATimerManager_defaultInstance == nil) {
    HTBATimerManager_defaultInstance = new_HTBATimerManager_init();
  }
  return HTBATimerManager_defaultInstance;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HTBATimerManager)

@implementation HTBATimerManager_TimerItem

- (instancetype)initWithHTBATimerManager:(HTBATimerManager *)outer$ {
  HTBATimerManager_TimerItem_initWithHTBATimerManager_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithHTBATimerManager:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "target_", "LHTBATimerInterface;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "delay_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "repeat_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "timestamp_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LHTBATimerManager;" };
  static const J2ObjcClassInfo _HTBATimerManager_TimerItem = { "TimerItem", "com.github.howtobuildapp.libservice.platform", ptrTable, methods, fields, 7, 0x2, 1, 4, 0, -1, -1, -1, -1 };
  return &_HTBATimerManager_TimerItem;
}

@end

void HTBATimerManager_TimerItem_initWithHTBATimerManager_(HTBATimerManager_TimerItem *self, HTBATimerManager *outer$) {
  NSObject_init(self);
}

HTBATimerManager_TimerItem *new_HTBATimerManager_TimerItem_initWithHTBATimerManager_(HTBATimerManager *outer$) {
  J2OBJC_NEW_IMPL(HTBATimerManager_TimerItem, initWithHTBATimerManager_, outer$)
}

HTBATimerManager_TimerItem *create_HTBATimerManager_TimerItem_initWithHTBATimerManager_(HTBATimerManager *outer$) {
  J2OBJC_CREATE_IMPL(HTBATimerManager_TimerItem, initWithHTBATimerManager_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HTBATimerManager_TimerItem)
