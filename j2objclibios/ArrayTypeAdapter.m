//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/internal/bind/ArrayTypeAdapter.java
//

#include "$Gson$Types.h"
#include "ArrayTypeAdapter.h"
#include "Gson.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JsonReader.h"
#include "JsonToken.h"
#include "JsonWriter.h"
#include "TypeAdapter.h"
#include "TypeAdapterFactory.h"
#include "TypeAdapterRuntimeTypeWrapper.h"
#include "TypeToken.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/GenericArrayType.h"
#include "java/lang/reflect/Type.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface GSONArrayTypeAdapter () {
 @public
  IOSClass *componentType_;
  GSONTypeAdapter *componentTypeAdapter_;
}

@end

J2OBJC_FIELD_SETTER(GSONArrayTypeAdapter, componentType_, IOSClass *)
J2OBJC_FIELD_SETTER(GSONArrayTypeAdapter, componentTypeAdapter_, GSONTypeAdapter *)

@interface GSONArrayTypeAdapter_1 : NSObject < GSONTypeAdapterFactory >

- (instancetype)init;

- (GSONTypeAdapter *)createWithGSONGson:(GSONGson *)gson
                      withGSONTypeToken:(GSONTypeToken *)typeToken;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONArrayTypeAdapter_1)

__attribute__((unused)) static void GSONArrayTypeAdapter_1_init(GSONArrayTypeAdapter_1 *self);

__attribute__((unused)) static GSONArrayTypeAdapter_1 *new_GSONArrayTypeAdapter_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static GSONArrayTypeAdapter_1 *create_GSONArrayTypeAdapter_1_init();

J2OBJC_INITIALIZED_DEFN(GSONArrayTypeAdapter)

id<GSONTypeAdapterFactory> GSONArrayTypeAdapter_FACTORY;

@implementation GSONArrayTypeAdapter

- (instancetype)initWithGSONGson:(GSONGson *)context
             withGSONTypeAdapter:(GSONTypeAdapter *)componentTypeAdapter
                    withIOSClass:(IOSClass *)componentType {
  GSONArrayTypeAdapter_initWithGSONGson_withGSONTypeAdapter_withIOSClass_(self, context, componentTypeAdapter, componentType);
  return self;
}

- (id)readWithGSONJsonReader:(GSONJsonReader *)inArg {
  if ([((GSONJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GSONJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  [inArg beginArray];
  while ([inArg hasNext]) {
    id instance = [((GSONTypeAdapter *) nil_chk(componentTypeAdapter_)) readWithGSONJsonReader:inArg];
    [list addWithId:instance];
  }
  [inArg endArray];
  jint size = [list size];
  id array = JavaLangReflectArray_newInstanceWithIOSClass_withInt_(componentType_, size);
  for (jint i = 0; i < size; i++) {
    JavaLangReflectArray_setWithId_withInt_withId_(array, i, [list getWithInt:i]);
  }
  return array;
}

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(id)array {
  if (array == nil) {
    (void) [((GSONJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  (void) [((GSONJsonWriter *) nil_chk(outArg)) beginArray];
  for (jint i = 0, length = JavaLangReflectArray_getLengthWithId_(array); i < length; i++) {
    id value = JavaLangReflectArray_getWithId_withInt_(array, i);
    [((GSONTypeAdapter *) nil_chk(componentTypeAdapter_)) writeWithGSONJsonWriter:outArg withId:value];
  }
  (void) [outArg endArray];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithGSONGson:withGSONTypeAdapter:withIOSClass:);
  methods[1].selector = @selector(readWithGSONJsonReader:);
  methods[2].selector = @selector(writeWithGSONJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FACTORY", "LGSONTypeAdapterFactory;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "componentType_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "componentTypeAdapter_", "LGSONTypeAdapter;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LGSONGson;LGSONTypeAdapter;LIOSClass;", "(Lcom/google/gson/Gson;Lcom/google/gson/TypeAdapter<TE;>;Ljava/lang/Class<TE;>;)V", "read", "LGSONJsonReader;", "LJavaIoIOException;", "write", "LGSONJsonWriter;LNSObject;", &GSONArrayTypeAdapter_FACTORY, "Ljava/lang/Class<TE;>;", "Lcom/google/gson/TypeAdapter<TE;>;", "<E:Ljava/lang/Object;>Lcom/google/gson/TypeAdapter<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _GSONArrayTypeAdapter = { "ArrayTypeAdapter", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x11, 3, 3, -1, -1, -1, 10, -1 };
  return &_GSONArrayTypeAdapter;
}

+ (void)initialize {
  if (self == [GSONArrayTypeAdapter class]) {
    GSONArrayTypeAdapter_FACTORY = new_GSONArrayTypeAdapter_1_init();
    J2OBJC_SET_INITIALIZED(GSONArrayTypeAdapter)
  }
}

@end

void GSONArrayTypeAdapter_initWithGSONGson_withGSONTypeAdapter_withIOSClass_(GSONArrayTypeAdapter *self, GSONGson *context, GSONTypeAdapter *componentTypeAdapter, IOSClass *componentType) {
  GSONTypeAdapter_init(self);
  self->componentTypeAdapter_ = new_GSONTypeAdapterRuntimeTypeWrapper_initWithGSONGson_withGSONTypeAdapter_withJavaLangReflectType_(context, componentTypeAdapter, componentType);
  self->componentType_ = componentType;
}

GSONArrayTypeAdapter *new_GSONArrayTypeAdapter_initWithGSONGson_withGSONTypeAdapter_withIOSClass_(GSONGson *context, GSONTypeAdapter *componentTypeAdapter, IOSClass *componentType) {
  J2OBJC_NEW_IMPL(GSONArrayTypeAdapter, initWithGSONGson_withGSONTypeAdapter_withIOSClass_, context, componentTypeAdapter, componentType)
}

GSONArrayTypeAdapter *create_GSONArrayTypeAdapter_initWithGSONGson_withGSONTypeAdapter_withIOSClass_(GSONGson *context, GSONTypeAdapter *componentTypeAdapter, IOSClass *componentType) {
  J2OBJC_CREATE_IMPL(GSONArrayTypeAdapter, initWithGSONGson_withGSONTypeAdapter_withIOSClass_, context, componentTypeAdapter, componentType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GSONArrayTypeAdapter)

@implementation GSONArrayTypeAdapter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONArrayTypeAdapter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (GSONTypeAdapter *)createWithGSONGson:(GSONGson *)gson
                      withGSONTypeToken:(GSONTypeToken *)typeToken {
  id<JavaLangReflectType> type = [((GSONTypeToken *) nil_chk(typeToken)) getType];
  if (!([JavaLangReflectGenericArrayType_class_() isInstance:type] || ([type isKindOfClass:[IOSClass class]] && [((IOSClass *) nil_chk(((IOSClass *) cast_chk(type, [IOSClass class])))) isArray]))) {
    return nil;
  }
  id<JavaLangReflectType> componentType = GSON_Gson_Types_getArrayComponentTypeWithJavaLangReflectType_(type);
  GSONTypeAdapter *componentTypeAdapter = [((GSONGson *) nil_chk(gson)) getAdapterWithGSONTypeToken:GSONTypeToken_getWithJavaLangReflectType_(componentType)];
  return new_GSONArrayTypeAdapter_initWithGSONGson_withGSONTypeAdapter_withIOSClass_(gson, componentTypeAdapter, GSON_Gson_Types_getRawTypeWithJavaLangReflectType_(componentType));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONTypeAdapter;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createWithGSONGson:withGSONTypeToken:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "create", "LGSONGson;LGSONTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "LGSONArrayTypeAdapter;" };
  static const J2ObjcClassInfo _GSONArrayTypeAdapter_1 = { "", "com.google.gson.internal.bind", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, -1, -1 };
  return &_GSONArrayTypeAdapter_1;
}

@end

void GSONArrayTypeAdapter_1_init(GSONArrayTypeAdapter_1 *self) {
  NSObject_init(self);
}

GSONArrayTypeAdapter_1 *new_GSONArrayTypeAdapter_1_init() {
  J2OBJC_NEW_IMPL(GSONArrayTypeAdapter_1, init)
}

GSONArrayTypeAdapter_1 *create_GSONArrayTypeAdapter_1_init() {
  J2OBJC_CREATE_IMPL(GSONArrayTypeAdapter_1, init)
}
