//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/github/howtobuildapp/libservice/platform/NotificationManager.java
//

#include "Callback.h"
#include "EM.h"
#include "ExecutorManager.h"
#include "J2ObjC_source.h"
#include "NotificationInterface.h"
#include "NotificationManager.h"
#include "NotificationRequest.h"
#include "Request.h"
#include "Response.h"
#include "SwitchToMainThreadRequest.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface HTBANotificationManager () {
 @public
  JavaUtilHashMap *registerInfo_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(HTBANotificationManager, registerInfo_, JavaUtilHashMap *)

inline HTBANotificationManager *HTBANotificationManager_get_defaultInstance();
inline HTBANotificationManager *HTBANotificationManager_set_defaultInstance(HTBANotificationManager *value);
static HTBANotificationManager *HTBANotificationManager_defaultInstance;
J2OBJC_STATIC_FIELD_OBJ(HTBANotificationManager, defaultInstance, HTBANotificationManager *)

__attribute__((unused)) static void HTBANotificationManager_init(HTBANotificationManager *self);

__attribute__((unused)) static HTBANotificationManager *new_HTBANotificationManager_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static HTBANotificationManager *create_HTBANotificationManager_init();

@interface HTBANotificationManager_1 : HTBACallback {
 @public
  HTBANotificationManager *this$0_;
  NSString *val$notificationName_;
  id<JavaUtilMap> val$params_;
}

- (instancetype)initWithHTBANotificationManager:(HTBANotificationManager *)outer$
                                   withNSString:(NSString *)capture$0
                                withJavaUtilMap:(id<JavaUtilMap>)capture$1;

- (void)onCompleteWithHTBARequest:(HTBARequest *)req
                 withHTBAResponse:(HTBAResponse *)resp;

@end

J2OBJC_EMPTY_STATIC_INIT(HTBANotificationManager_1)

__attribute__((unused)) static void HTBANotificationManager_1_initWithHTBANotificationManager_withNSString_withJavaUtilMap_(HTBANotificationManager_1 *self, HTBANotificationManager *outer$, NSString *capture$0, id<JavaUtilMap> capture$1);

__attribute__((unused)) static HTBANotificationManager_1 *new_HTBANotificationManager_1_initWithHTBANotificationManager_withNSString_withJavaUtilMap_(HTBANotificationManager *outer$, NSString *capture$0, id<JavaUtilMap> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static HTBANotificationManager_1 *create_HTBANotificationManager_1_initWithHTBANotificationManager_withNSString_withJavaUtilMap_(HTBANotificationManager *outer$, NSString *capture$0, id<JavaUtilMap> capture$1);

@implementation HTBANotificationManager

+ (HTBANotificationManager *)defaultManager {
  return HTBANotificationManager_defaultManager();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  HTBANotificationManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)registerNotificationWithNSString:(NSString *)notificationName
           withHTBANotificationInterface:(id<HTBANotificationInterface>)obj {
  if (notificationName == nil || obj == nil) {
    return;
  }
  JavaUtilArrayList *list = [((JavaUtilHashMap *) nil_chk(registerInfo_)) getWithId:notificationName];
  if (list == nil) {
    list = new_JavaUtilArrayList_init();
    (void) [((JavaUtilHashMap *) nil_chk(registerInfo_)) putWithId:notificationName withId:list];
  }
  [list addWithId:obj];
}

- (void)unregisterNotificationWithNSString:(NSString *)notificationName
             withHTBANotificationInterface:(id<HTBANotificationInterface>)obj {
  if (notificationName == nil || obj == nil) {
    return;
  }
  JavaUtilArrayList *list = [((JavaUtilHashMap *) nil_chk(registerInfo_)) getWithId:notificationName];
  if (list == nil) {
    return;
  }
  [list removeWithId:obj];
}

- (void)postNotificationWithNSString:(NSString *)notificationName
                     withJavaUtilMap:(id<JavaUtilMap>)params {
  if (notificationName == nil) {
    return;
  }
  HTBANotificationRequest *request = new_HTBANotificationRequest_init();
  [request setNotificationNameWithNSString:notificationName];
  if (params != nil) {
    [((id<JavaUtilMap>) nil_chk([request getParams])) putAllWithJavaUtilMap:params];
  }
  [((HTBAExecutorManager *) nil_chk(JreLoadStatic(HTBAEM, mainManager))) executeRequestWithHTBARequest:new_HTBASwitchToMainThreadRequest_init() withId:nil withHTBACallback:new_HTBANotificationManager_1_initWithHTBANotificationManager_withNSString_withJavaUtilMap_(self, notificationName, params)];
  [((HTBAExecutorManager *) nil_chk(JreLoadStatic(HTBAEM, mainManager))) executeRequestWithHTBARequest:request withId:nil withHTBACallback:nil];
}

- (void)onReceiveNotificationWithNSString:(NSString *)notificationName
                          withJavaUtilMap:(id<JavaUtilMap>)params {
  if (notificationName == nil) {
    return;
  }
  id<JavaUtilList> services = [((JavaUtilHashMap *) nil_chk(registerInfo_)) getWithId:notificationName];
  for (id<HTBANotificationInterface> __strong service in nil_chk(services)) {
    [((id<HTBANotificationInterface>) nil_chk(service)) onReceiveNotificationWithNSString:notificationName withJavaUtilMap:params];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LHTBANotificationManager;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(defaultManager);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(registerNotificationWithNSString:withHTBANotificationInterface:);
  methods[3].selector = @selector(unregisterNotificationWithNSString:withHTBANotificationInterface:);
  methods[4].selector = @selector(postNotificationWithNSString:withJavaUtilMap:);
  methods[5].selector = @selector(onReceiveNotificationWithNSString:withJavaUtilMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "registerInfo_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
    { "defaultInstance", "LHTBANotificationManager;", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "registerNotification", "LNSString;LHTBANotificationInterface;", "unregisterNotification", "postNotification", "LNSString;LJavaUtilMap;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "onReceiveNotification", "Ljava/util/HashMap<Ljava/lang/String;Ljava/util/ArrayList<Lcom/github/howtobuildapp/libservice/platform/NotificationInterface;>;>;", &HTBANotificationManager_defaultInstance };
  static const J2ObjcClassInfo _HTBANotificationManager = { "NotificationManager", "com.github.howtobuildapp.libservice.platform", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_HTBANotificationManager;
}

@end

HTBANotificationManager *HTBANotificationManager_defaultManager() {
  HTBANotificationManager_initialize();
  if (HTBANotificationManager_defaultInstance == nil) {
    HTBANotificationManager_defaultInstance = new_HTBANotificationManager_init();
  }
  return HTBANotificationManager_defaultInstance;
}

void HTBANotificationManager_init(HTBANotificationManager *self) {
  NSObject_init(self);
  self->registerInfo_ = new_JavaUtilHashMap_init();
}

HTBANotificationManager *new_HTBANotificationManager_init() {
  J2OBJC_NEW_IMPL(HTBANotificationManager, init)
}

HTBANotificationManager *create_HTBANotificationManager_init() {
  J2OBJC_CREATE_IMPL(HTBANotificationManager, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HTBANotificationManager)

@implementation HTBANotificationManager_1

- (instancetype)initWithHTBANotificationManager:(HTBANotificationManager *)outer$
                                   withNSString:(NSString *)capture$0
                                withJavaUtilMap:(id<JavaUtilMap>)capture$1 {
  HTBANotificationManager_1_initWithHTBANotificationManager_withNSString_withJavaUtilMap_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)onCompleteWithHTBARequest:(HTBARequest *)req
                 withHTBAResponse:(HTBAResponse *)resp {
  [this$0_ onReceiveNotificationWithNSString:val$notificationName_ withJavaUtilMap:val$params_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithHTBANotificationManager:withNSString:withJavaUtilMap:);
  methods[1].selector = @selector(onCompleteWithHTBARequest:withHTBAResponse:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LHTBANotificationManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$notificationName_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$params_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "onComplete", "LHTBARequest;LHTBAResponse;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LHTBANotificationManager;", "postNotificationWithNSString:withJavaUtilMap:" };
  static const J2ObjcClassInfo _HTBANotificationManager_1 = { "", "com.github.howtobuildapp.libservice.platform", ptrTable, methods, fields, 7, 0x8018, 2, 3, 3, -1, 4, -1, -1 };
  return &_HTBANotificationManager_1;
}

@end

void HTBANotificationManager_1_initWithHTBANotificationManager_withNSString_withJavaUtilMap_(HTBANotificationManager_1 *self, HTBANotificationManager *outer$, NSString *capture$0, id<JavaUtilMap> capture$1) {
  self->this$0_ = outer$;
  self->val$notificationName_ = capture$0;
  self->val$params_ = capture$1;
  HTBACallback_init(self);
}

HTBANotificationManager_1 *new_HTBANotificationManager_1_initWithHTBANotificationManager_withNSString_withJavaUtilMap_(HTBANotificationManager *outer$, NSString *capture$0, id<JavaUtilMap> capture$1) {
  J2OBJC_NEW_IMPL(HTBANotificationManager_1, initWithHTBANotificationManager_withNSString_withJavaUtilMap_, outer$, capture$0, capture$1)
}

HTBANotificationManager_1 *create_HTBANotificationManager_1_initWithHTBANotificationManager_withNSString_withJavaUtilMap_(HTBANotificationManager *outer$, NSString *capture$0, id<JavaUtilMap> capture$1) {
  J2OBJC_CREATE_IMPL(HTBANotificationManager_1, initWithHTBANotificationManager_withNSString_withJavaUtilMap_, outer$, capture$0, capture$1)
}
