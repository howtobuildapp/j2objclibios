//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/reflect/TypeToken.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_TypeToken")
#ifdef RESTRICT_TypeToken
#define INCLUDE_ALL_TypeToken 0
#else
#define INCLUDE_ALL_TypeToken 1
#endif
#undef RESTRICT_TypeToken

#if !defined (GSONTypeToken_) && (INCLUDE_ALL_TypeToken || defined(INCLUDE_GSONTypeToken))
#define GSONTypeToken_

@class IOSClass;
@class IOSObjectArray;
@protocol JavaLangReflectType;

/*!
 @brief Represents a generic type <code>T</code>.Java doesn't yet provide a way to
  represent generic types, so this class does.
 Forces clients to create a
  subclass of this class which enables retrieval the type information even at
  runtime. 
 <p>For example, to create a type literal for <code>List<String></code>, you can
  create an empty anonymous inner class: 
 <p>
  <code>TypeToken<List<String>> list = new TypeToken<List<String>>() {};</code>
  
 <p>This syntax cannot be used to create type literals that have wildcard
  parameters, such as <code>Class<?></code> or <code>List<? extends CharSequence></code>.
 @author Bob Lee
 @author Sven Mawson
 @author Jesse Wilson
 */
@interface GSONTypeToken : NSObject {
 @public
  IOSClass *rawType_;
  id<JavaLangReflectType> type_;
  jint hashCode_;
}

#pragma mark Public

- (jboolean)isEqual:(id)o;

/*!
 @brief Gets type literal for the given <code>Class</code> instance.
 */
+ (GSONTypeToken *)getWithIOSClass:(IOSClass *)type;

/*!
 @brief Gets type literal for the given <code>Type</code> instance.
 */
+ (GSONTypeToken *)getWithJavaLangReflectType:(id<JavaLangReflectType>)type;

/*!
 @brief Gets type literal for the array type whose elements are all instances of <code>componentType</code>.
 */
+ (GSONTypeToken *)getArrayWithJavaLangReflectType:(id<JavaLangReflectType>)componentType;

/*!
 @brief Gets type literal for the parameterized type represented by applying <code>typeArguments</code> to 
 <code>rawType</code>.
 */
+ (GSONTypeToken *)getParameterizedWithJavaLangReflectType:(id<JavaLangReflectType>)rawType
                              withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments;

/*!
 @brief Returns the raw (non-generic) type for this type.
 */
- (IOSClass *)getRawType;

/*!
 @brief Gets underlying <code>Type</code> instance.
 */
- (id<JavaLangReflectType>)getType;

- (NSUInteger)hash;

/*!
 @brief Check if this type is assignable from the given class object.
 */
- (jboolean)isAssignableFromWithIOSClass:(IOSClass *)cls;

/*!
 @brief Check if this type is assignable from the given Type.
 */
- (jboolean)isAssignableFromWithJavaLangReflectType:(id<JavaLangReflectType>)from;

/*!
 @brief Check if this type is assignable from the given type token.
 */
- (jboolean)isAssignableFromWithGSONTypeToken:(GSONTypeToken *)token;

- (NSString *)description;

#pragma mark Protected

/*!
 @brief Constructs a new type literal.Derives represented class from type
  parameter.
 <p>Clients create an empty anonymous subclass. Doing so embeds the type
  parameter in the anonymous class's type hierarchy so we can reconstitute it
  at runtime despite erasure.
 */
- (instancetype)init;

#pragma mark Package-Private

/*!
 @brief Unsafe.Constructs a type literal manually.
 */
- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)type;

/*!
 @brief Returns the type from super class's type parameter in <code>form</code>
 .
 */
+ (id<JavaLangReflectType>)getSuperclassTypeParameterWithIOSClass:(IOSClass *)subclass;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONTypeToken)

J2OBJC_FIELD_SETTER(GSONTypeToken, rawType_, IOSClass *)
J2OBJC_FIELD_SETTER(GSONTypeToken, type_, id<JavaLangReflectType>)

FOUNDATION_EXPORT void GSONTypeToken_init(GSONTypeToken *self);

FOUNDATION_EXPORT GSONTypeToken *new_GSONTypeToken_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GSONTypeToken *create_GSONTypeToken_init();

FOUNDATION_EXPORT void GSONTypeToken_initWithJavaLangReflectType_(GSONTypeToken *self, id<JavaLangReflectType> type);

FOUNDATION_EXPORT GSONTypeToken *new_GSONTypeToken_initWithJavaLangReflectType_(id<JavaLangReflectType> type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GSONTypeToken *create_GSONTypeToken_initWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT id<JavaLangReflectType> GSONTypeToken_getSuperclassTypeParameterWithIOSClass_(IOSClass *subclass);

FOUNDATION_EXPORT GSONTypeToken *GSONTypeToken_getWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT GSONTypeToken *GSONTypeToken_getWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT GSONTypeToken *GSONTypeToken_getParameterizedWithJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments);

FOUNDATION_EXPORT GSONTypeToken *GSONTypeToken_getArrayWithJavaLangReflectType_(id<JavaLangReflectType> componentType);

J2OBJC_TYPE_LITERAL_HEADER(GSONTypeToken)

@compatibility_alias ComGoogleGsonReflectTypeToken GSONTypeToken;

#endif

#pragma pop_macro("INCLUDE_ALL_TypeToken")
