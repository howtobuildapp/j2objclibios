//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/GsonBuilder.java
//

#include "$Gson$Preconditions.h"
#include "DefaultDateTypeAdapter.h"
#include "Excluder.h"
#include "ExclusionStrategy.h"
#include "FieldNamingPolicy.h"
#include "FieldNamingStrategy.h"
#include "Gson.h"
#include "GsonBuilder.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "InstanceCreator.h"
#include "J2ObjC_source.h"
#include "JsonDeserializer.h"
#include "JsonSerializer.h"
#include "LongSerializationPolicy.h"
#include "TreeTypeAdapter.h"
#include "TypeAdapter.h"
#include "TypeAdapterFactory.h"
#include "TypeAdapters.h"
#include "TypeToken.h"
#include "java/lang/reflect/Type.h"
#include "java/sql/Date.h"
#include "java/sql/Timestamp.h"
#include "java/text/DateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface GSONGsonBuilder () {
 @public
  GSONExcluder *excluder_;
  GSONLongSerializationPolicy *longSerializationPolicy_;
  id<GSONFieldNamingStrategy> fieldNamingPolicy_;
  id<JavaUtilMap> instanceCreators_;
  id<JavaUtilList> factories_;
  /*!
   @brief tree-style hierarchy factories.These come after factories for backwards compatibility.
   */
  id<JavaUtilList> hierarchyFactories_;
  jboolean serializeNulls_;
  NSString *datePattern_;
  jint dateStyle_;
  jint timeStyle_;
  jboolean complexMapKeySerialization_;
  jboolean serializeSpecialFloatingPointValues_;
  jboolean escapeHtmlChars_;
  jboolean prettyPrinting_;
  jboolean generateNonExecutableJson_;
  jboolean lenient_;
}

- (void)addTypeAdaptersForDateWithNSString:(NSString *)datePattern
                                   withInt:(jint)dateStyle
                                   withInt:(jint)timeStyle
                          withJavaUtilList:(id<JavaUtilList>)factories;

@end

J2OBJC_FIELD_SETTER(GSONGsonBuilder, excluder_, GSONExcluder *)
J2OBJC_FIELD_SETTER(GSONGsonBuilder, longSerializationPolicy_, GSONLongSerializationPolicy *)
J2OBJC_FIELD_SETTER(GSONGsonBuilder, fieldNamingPolicy_, id<GSONFieldNamingStrategy>)
J2OBJC_FIELD_SETTER(GSONGsonBuilder, instanceCreators_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(GSONGsonBuilder, factories_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GSONGsonBuilder, hierarchyFactories_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GSONGsonBuilder, datePattern_, NSString *)

__attribute__((unused)) static void GSONGsonBuilder_addTypeAdaptersForDateWithNSString_withInt_withInt_withJavaUtilList_(GSONGsonBuilder *self, NSString *datePattern, jint dateStyle, jint timeStyle, id<JavaUtilList> factories);

@implementation GSONGsonBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONGsonBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithGSONGson:(GSONGson *)gson {
  GSONGsonBuilder_initWithGSONGson_(self, gson);
  return self;
}

- (GSONGsonBuilder *)setVersionWithDouble:(jdouble)ignoreVersionsAfter {
  excluder_ = [((GSONExcluder *) nil_chk(excluder_)) withVersionWithDouble:ignoreVersionsAfter];
  return self;
}

- (GSONGsonBuilder *)excludeFieldsWithModifiersWithIntArray:(IOSIntArray *)modifiers {
  excluder_ = [((GSONExcluder *) nil_chk(excluder_)) withModifiersWithIntArray:modifiers];
  return self;
}

- (GSONGsonBuilder *)generateNonExecutableJson {
  self->generateNonExecutableJson_ = true;
  return self;
}

- (GSONGsonBuilder *)excludeFieldsWithoutExposeAnnotation {
  excluder_ = [((GSONExcluder *) nil_chk(excluder_)) excludeFieldsWithoutExposeAnnotation];
  return self;
}

- (GSONGsonBuilder *)serializeNulls {
  self->serializeNulls_ = true;
  return self;
}

- (GSONGsonBuilder *)enableComplexMapKeySerialization {
  complexMapKeySerialization_ = true;
  return self;
}

- (GSONGsonBuilder *)disableInnerClassSerialization {
  excluder_ = [((GSONExcluder *) nil_chk(excluder_)) disableInnerClassSerialization];
  return self;
}

- (GSONGsonBuilder *)setLongSerializationPolicyWithGSONLongSerializationPolicy:(GSONLongSerializationPolicy *)serializationPolicy {
  self->longSerializationPolicy_ = serializationPolicy;
  return self;
}

- (GSONGsonBuilder *)setFieldNamingPolicyWithGSONFieldNamingPolicy:(GSONFieldNamingPolicy *)namingConvention {
  self->fieldNamingPolicy_ = namingConvention;
  return self;
}

- (GSONGsonBuilder *)setFieldNamingStrategyWithGSONFieldNamingStrategy:(id<GSONFieldNamingStrategy>)fieldNamingStrategy {
  self->fieldNamingPolicy_ = fieldNamingStrategy;
  return self;
}

- (GSONGsonBuilder *)setExclusionStrategiesWithGSONExclusionStrategyArray:(IOSObjectArray *)strategies {
  {
    IOSObjectArray *a__ = strategies;
    id<GSONExclusionStrategy> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<GSONExclusionStrategy> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<GSONExclusionStrategy> strategy = *b__++;
      excluder_ = [((GSONExcluder *) nil_chk(excluder_)) withExclusionStrategyWithGSONExclusionStrategy:strategy withBoolean:true withBoolean:true];
    }
  }
  return self;
}

- (GSONGsonBuilder *)addSerializationExclusionStrategyWithGSONExclusionStrategy:(id<GSONExclusionStrategy>)strategy {
  excluder_ = [((GSONExcluder *) nil_chk(excluder_)) withExclusionStrategyWithGSONExclusionStrategy:strategy withBoolean:true withBoolean:false];
  return self;
}

- (GSONGsonBuilder *)addDeserializationExclusionStrategyWithGSONExclusionStrategy:(id<GSONExclusionStrategy>)strategy {
  excluder_ = [((GSONExcluder *) nil_chk(excluder_)) withExclusionStrategyWithGSONExclusionStrategy:strategy withBoolean:false withBoolean:true];
  return self;
}

- (GSONGsonBuilder *)setPrettyPrinting {
  prettyPrinting_ = true;
  return self;
}

- (GSONGsonBuilder *)setLenient {
  lenient_ = true;
  return self;
}

- (GSONGsonBuilder *)disableHtmlEscaping {
  self->escapeHtmlChars_ = false;
  return self;
}

- (GSONGsonBuilder *)setDateFormatWithNSString:(NSString *)pattern {
  self->datePattern_ = pattern;
  return self;
}

- (GSONGsonBuilder *)setDateFormatWithInt:(jint)style {
  self->dateStyle_ = style;
  self->datePattern_ = nil;
  return self;
}

- (GSONGsonBuilder *)setDateFormatWithInt:(jint)dateStyle
                                  withInt:(jint)timeStyle {
  self->dateStyle_ = dateStyle;
  self->timeStyle_ = timeStyle;
  self->datePattern_ = nil;
  return self;
}

- (GSONGsonBuilder *)registerTypeAdapterWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                                         withId:(id)typeAdapter {
  GSON_Gson_Preconditions_checkArgumentWithBoolean_([GSONJsonSerializer_class_() isInstance:typeAdapter] || [GSONJsonDeserializer_class_() isInstance:typeAdapter] || [GSONInstanceCreator_class_() isInstance:typeAdapter] || [typeAdapter isKindOfClass:[GSONTypeAdapter class]]);
  if ([GSONInstanceCreator_class_() isInstance:typeAdapter]) {
    (void) [((id<JavaUtilMap>) nil_chk(instanceCreators_)) putWithId:type withId:(id<GSONInstanceCreator>) cast_check(typeAdapter, GSONInstanceCreator_class_())];
  }
  if ([GSONJsonSerializer_class_() isInstance:typeAdapter] || [GSONJsonDeserializer_class_() isInstance:typeAdapter]) {
    GSONTypeToken *typeToken = GSONTypeToken_getWithJavaLangReflectType_(type);
    [((id<JavaUtilList>) nil_chk(factories_)) addWithId:GSONTreeTypeAdapter_newFactoryWithMatchRawTypeWithGSONTypeToken_withId_(typeToken, typeAdapter)];
  }
  if ([typeAdapter isKindOfClass:[GSONTypeAdapter class]]) {
    [((id<JavaUtilList>) nil_chk(factories_)) addWithId:GSONTypeAdapters_newFactoryWithGSONTypeToken_withGSONTypeAdapter_(GSONTypeToken_getWithJavaLangReflectType_(type), (GSONTypeAdapter *) cast_chk(typeAdapter, [GSONTypeAdapter class]))];
  }
  return self;
}

- (GSONGsonBuilder *)registerTypeAdapterFactoryWithGSONTypeAdapterFactory:(id<GSONTypeAdapterFactory>)factory {
  [((id<JavaUtilList>) nil_chk(factories_)) addWithId:factory];
  return self;
}

- (GSONGsonBuilder *)registerTypeHierarchyAdapterWithIOSClass:(IOSClass *)baseType
                                                       withId:(id)typeAdapter {
  GSON_Gson_Preconditions_checkArgumentWithBoolean_([GSONJsonSerializer_class_() isInstance:typeAdapter] || [GSONJsonDeserializer_class_() isInstance:typeAdapter] || [typeAdapter isKindOfClass:[GSONTypeAdapter class]]);
  if ([GSONJsonDeserializer_class_() isInstance:typeAdapter] || [GSONJsonSerializer_class_() isInstance:typeAdapter]) {
    [((id<JavaUtilList>) nil_chk(hierarchyFactories_)) addWithId:GSONTreeTypeAdapter_newTypeHierarchyFactoryWithIOSClass_withId_(baseType, typeAdapter)];
  }
  if ([typeAdapter isKindOfClass:[GSONTypeAdapter class]]) {
    [((id<JavaUtilList>) nil_chk(factories_)) addWithId:GSONTypeAdapters_newTypeHierarchyFactoryWithIOSClass_withGSONTypeAdapter_(baseType, (GSONTypeAdapter *) cast_chk(typeAdapter, [GSONTypeAdapter class]))];
  }
  return self;
}

- (GSONGsonBuilder *)serializeSpecialFloatingPointValues {
  self->serializeSpecialFloatingPointValues_ = true;
  return self;
}

- (GSONGson *)create {
  id<JavaUtilList> factories = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(self->factories_)) size] + [((id<JavaUtilList>) nil_chk(self->hierarchyFactories_)) size] + 3);
  [factories addAllWithJavaUtilCollection:self->factories_];
  JavaUtilCollections_reverseWithJavaUtilList_(factories);
  id<JavaUtilList> hierarchyFactories = new_JavaUtilArrayList_initWithJavaUtilCollection_(self->hierarchyFactories_);
  JavaUtilCollections_reverseWithJavaUtilList_(hierarchyFactories);
  [factories addAllWithJavaUtilCollection:hierarchyFactories];
  GSONGsonBuilder_addTypeAdaptersForDateWithNSString_withInt_withInt_withJavaUtilList_(self, datePattern_, dateStyle_, timeStyle_, factories);
  return new_GSONGson_initWithGSONExcluder_withGSONFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGSONLongSerializationPolicy_withNSString_withInt_withInt_withJavaUtilList_withJavaUtilList_withJavaUtilList_(excluder_, fieldNamingPolicy_, instanceCreators_, serializeNulls_, complexMapKeySerialization_, generateNonExecutableJson_, escapeHtmlChars_, prettyPrinting_, lenient_, serializeSpecialFloatingPointValues_, longSerializationPolicy_, datePattern_, dateStyle_, timeStyle_, self->factories_, self->hierarchyFactories_, factories);
}

- (void)addTypeAdaptersForDateWithNSString:(NSString *)datePattern
                                   withInt:(jint)dateStyle
                                   withInt:(jint)timeStyle
                          withJavaUtilList:(id<JavaUtilList>)factories {
  GSONGsonBuilder_addTypeAdaptersForDateWithNSString_withInt_withInt_withJavaUtilList_(self, datePattern, dateStyle, timeStyle, factories);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x81, 3, 4, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x81, 11, 12, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, 16, 18, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, 16, 19, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, 24, 25, -1, 26, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONGson;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, 29, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithGSONGson:);
  methods[2].selector = @selector(setVersionWithDouble:);
  methods[3].selector = @selector(excludeFieldsWithModifiersWithIntArray:);
  methods[4].selector = @selector(generateNonExecutableJson);
  methods[5].selector = @selector(excludeFieldsWithoutExposeAnnotation);
  methods[6].selector = @selector(serializeNulls);
  methods[7].selector = @selector(enableComplexMapKeySerialization);
  methods[8].selector = @selector(disableInnerClassSerialization);
  methods[9].selector = @selector(setLongSerializationPolicyWithGSONLongSerializationPolicy:);
  methods[10].selector = @selector(setFieldNamingPolicyWithGSONFieldNamingPolicy:);
  methods[11].selector = @selector(setFieldNamingStrategyWithGSONFieldNamingStrategy:);
  methods[12].selector = @selector(setExclusionStrategiesWithGSONExclusionStrategyArray:);
  methods[13].selector = @selector(addSerializationExclusionStrategyWithGSONExclusionStrategy:);
  methods[14].selector = @selector(addDeserializationExclusionStrategyWithGSONExclusionStrategy:);
  methods[15].selector = @selector(setPrettyPrinting);
  methods[16].selector = @selector(setLenient);
  methods[17].selector = @selector(disableHtmlEscaping);
  methods[18].selector = @selector(setDateFormatWithNSString:);
  methods[19].selector = @selector(setDateFormatWithInt:);
  methods[20].selector = @selector(setDateFormatWithInt:withInt:);
  methods[21].selector = @selector(registerTypeAdapterWithJavaLangReflectType:withId:);
  methods[22].selector = @selector(registerTypeAdapterFactoryWithGSONTypeAdapterFactory:);
  methods[23].selector = @selector(registerTypeHierarchyAdapterWithIOSClass:withId:);
  methods[24].selector = @selector(serializeSpecialFloatingPointValues);
  methods[25].selector = @selector(create);
  methods[26].selector = @selector(addTypeAdaptersForDateWithNSString:withInt:withInt:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "excluder_", "LGSONExcluder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "longSerializationPolicy_", "LGSONLongSerializationPolicy;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldNamingPolicy_", "LGSONFieldNamingStrategy;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "instanceCreators_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 30, -1 },
    { "factories_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 31, -1 },
    { "hierarchyFactories_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 31, -1 },
    { "serializeNulls_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "datePattern_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dateStyle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timeStyle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "complexMapKeySerialization_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serializeSpecialFloatingPointValues_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "escapeHtmlChars_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prettyPrinting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "generateNonExecutableJson_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lenient_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LGSONGson;", "setVersion", "D", "excludeFieldsWithModifiers", "[I", "setLongSerializationPolicy", "LGSONLongSerializationPolicy;", "setFieldNamingPolicy", "LGSONFieldNamingPolicy;", "setFieldNamingStrategy", "LGSONFieldNamingStrategy;", "setExclusionStrategies", "[LGSONExclusionStrategy;", "addSerializationExclusionStrategy", "LGSONExclusionStrategy;", "addDeserializationExclusionStrategy", "setDateFormat", "LNSString;", "I", "II", "registerTypeAdapter", "LJavaLangReflectType;LNSObject;", "registerTypeAdapterFactory", "LGSONTypeAdapterFactory;", "registerTypeHierarchyAdapter", "LIOSClass;LNSObject;", "(Ljava/lang/Class<*>;Ljava/lang/Object;)Lcom/google/gson/GsonBuilder;", "addTypeAdaptersForDate", "LNSString;IILJavaUtilList;", "(Ljava/lang/String;IILjava/util/List<Lcom/google/gson/TypeAdapterFactory;>;)V", "Ljava/util/Map<Ljava/lang/reflect/Type;Lcom/google/gson/InstanceCreator<*>;>;", "Ljava/util/List<Lcom/google/gson/TypeAdapterFactory;>;" };
  static const J2ObjcClassInfo _GSONGsonBuilder = { "GsonBuilder", "com.google.gson", ptrTable, methods, fields, 7, 0x11, 27, 16, -1, -1, -1, -1, -1 };
  return &_GSONGsonBuilder;
}

@end

void GSONGsonBuilder_init(GSONGsonBuilder *self) {
  NSObject_init(self);
  self->excluder_ = JreLoadStatic(GSONExcluder, DEFAULT);
  self->longSerializationPolicy_ = JreLoadEnum(GSONLongSerializationPolicy, DEFAULT);
  self->fieldNamingPolicy_ = JreLoadEnum(GSONFieldNamingPolicy, IDENTITY);
  self->instanceCreators_ = new_JavaUtilHashMap_init();
  self->factories_ = new_JavaUtilArrayList_init();
  self->hierarchyFactories_ = new_JavaUtilArrayList_init();
  self->serializeNulls_ = GSONGson_DEFAULT_SERIALIZE_NULLS;
  self->dateStyle_ = JavaTextDateFormat_DEFAULT;
  self->timeStyle_ = JavaTextDateFormat_DEFAULT;
  self->complexMapKeySerialization_ = GSONGson_DEFAULT_COMPLEX_MAP_KEYS;
  self->serializeSpecialFloatingPointValues_ = GSONGson_DEFAULT_SPECIALIZE_FLOAT_VALUES;
  self->escapeHtmlChars_ = GSONGson_DEFAULT_ESCAPE_HTML;
  self->prettyPrinting_ = GSONGson_DEFAULT_PRETTY_PRINT;
  self->generateNonExecutableJson_ = GSONGson_DEFAULT_JSON_NON_EXECUTABLE;
  self->lenient_ = GSONGson_DEFAULT_LENIENT;
}

GSONGsonBuilder *new_GSONGsonBuilder_init() {
  J2OBJC_NEW_IMPL(GSONGsonBuilder, init)
}

GSONGsonBuilder *create_GSONGsonBuilder_init() {
  J2OBJC_CREATE_IMPL(GSONGsonBuilder, init)
}

void GSONGsonBuilder_initWithGSONGson_(GSONGsonBuilder *self, GSONGson *gson) {
  NSObject_init(self);
  self->excluder_ = JreLoadStatic(GSONExcluder, DEFAULT);
  self->longSerializationPolicy_ = JreLoadEnum(GSONLongSerializationPolicy, DEFAULT);
  self->fieldNamingPolicy_ = JreLoadEnum(GSONFieldNamingPolicy, IDENTITY);
  self->instanceCreators_ = new_JavaUtilHashMap_init();
  self->factories_ = new_JavaUtilArrayList_init();
  self->hierarchyFactories_ = new_JavaUtilArrayList_init();
  self->serializeNulls_ = GSONGson_DEFAULT_SERIALIZE_NULLS;
  self->dateStyle_ = JavaTextDateFormat_DEFAULT;
  self->timeStyle_ = JavaTextDateFormat_DEFAULT;
  self->complexMapKeySerialization_ = GSONGson_DEFAULT_COMPLEX_MAP_KEYS;
  self->serializeSpecialFloatingPointValues_ = GSONGson_DEFAULT_SPECIALIZE_FLOAT_VALUES;
  self->escapeHtmlChars_ = GSONGson_DEFAULT_ESCAPE_HTML;
  self->prettyPrinting_ = GSONGson_DEFAULT_PRETTY_PRINT;
  self->generateNonExecutableJson_ = GSONGson_DEFAULT_JSON_NON_EXECUTABLE;
  self->lenient_ = GSONGson_DEFAULT_LENIENT;
  self->excluder_ = ((GSONGson *) nil_chk(gson))->excluder_;
  self->fieldNamingPolicy_ = gson->fieldNamingStrategy_;
  [self->instanceCreators_ putAllWithJavaUtilMap:gson->instanceCreators_];
  self->serializeNulls_ = gson->serializeNulls_;
  self->complexMapKeySerialization_ = gson->complexMapKeySerialization_;
  self->generateNonExecutableJson_ = gson->generateNonExecutableJson_;
  self->escapeHtmlChars_ = gson->htmlSafe_;
  self->prettyPrinting_ = gson->prettyPrinting_;
  self->lenient_ = gson->lenient_;
  self->serializeSpecialFloatingPointValues_ = gson->serializeSpecialFloatingPointValues_;
  self->longSerializationPolicy_ = gson->longSerializationPolicy_;
  self->datePattern_ = gson->datePattern_;
  self->dateStyle_ = gson->dateStyle_;
  self->timeStyle_ = gson->timeStyle_;
  [self->factories_ addAllWithJavaUtilCollection:gson->builderFactories_];
  [self->hierarchyFactories_ addAllWithJavaUtilCollection:gson->builderHierarchyFactories_];
}

GSONGsonBuilder *new_GSONGsonBuilder_initWithGSONGson_(GSONGson *gson) {
  J2OBJC_NEW_IMPL(GSONGsonBuilder, initWithGSONGson_, gson)
}

GSONGsonBuilder *create_GSONGsonBuilder_initWithGSONGson_(GSONGson *gson) {
  J2OBJC_CREATE_IMPL(GSONGsonBuilder, initWithGSONGson_, gson)
}

void GSONGsonBuilder_addTypeAdaptersForDateWithNSString_withInt_withInt_withJavaUtilList_(GSONGsonBuilder *self, NSString *datePattern, jint dateStyle, jint timeStyle, id<JavaUtilList> factories) {
  GSONDefaultDateTypeAdapter *dateTypeAdapter;
  GSONTypeAdapter *timestampTypeAdapter;
  GSONTypeAdapter *javaSqlDateTypeAdapter;
  if (datePattern != nil && ![@"" isEqual:[datePattern java_trim]]) {
    dateTypeAdapter = new_GSONDefaultDateTypeAdapter_initWithIOSClass_withNSString_(JavaUtilDate_class_(), datePattern);
    timestampTypeAdapter = new_GSONDefaultDateTypeAdapter_initWithIOSClass_withNSString_(JavaSqlTimestamp_class_(), datePattern);
    javaSqlDateTypeAdapter = new_GSONDefaultDateTypeAdapter_initWithIOSClass_withNSString_(JavaSqlDate_class_(), datePattern);
  }
  else if (dateStyle != JavaTextDateFormat_DEFAULT && timeStyle != JavaTextDateFormat_DEFAULT) {
    dateTypeAdapter = new_GSONDefaultDateTypeAdapter_initWithIOSClass_withInt_withInt_(JavaUtilDate_class_(), dateStyle, timeStyle);
    timestampTypeAdapter = new_GSONDefaultDateTypeAdapter_initWithIOSClass_withInt_withInt_(JavaSqlTimestamp_class_(), dateStyle, timeStyle);
    javaSqlDateTypeAdapter = new_GSONDefaultDateTypeAdapter_initWithIOSClass_withInt_withInt_(JavaSqlDate_class_(), dateStyle, timeStyle);
  }
  else {
    return;
  }
  [((id<JavaUtilList>) nil_chk(factories)) addWithId:GSONTypeAdapters_newFactoryWithIOSClass_withGSONTypeAdapter_(JavaUtilDate_class_(), dateTypeAdapter)];
  [factories addWithId:GSONTypeAdapters_newFactoryWithIOSClass_withGSONTypeAdapter_(JavaSqlTimestamp_class_(), timestampTypeAdapter)];
  [factories addWithId:GSONTypeAdapters_newFactoryWithIOSClass_withGSONTypeAdapter_(JavaSqlDate_class_(), javaSqlDateTypeAdapter)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GSONGsonBuilder)
