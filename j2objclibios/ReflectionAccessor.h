//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/internal/reflect/ReflectionAccessor.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ReflectionAccessor")
#ifdef RESTRICT_ReflectionAccessor
#define INCLUDE_ALL_ReflectionAccessor 0
#else
#define INCLUDE_ALL_ReflectionAccessor 1
#endif
#undef RESTRICT_ReflectionAccessor

#if !defined (GSONReflectionAccessor_) && (INCLUDE_ALL_ReflectionAccessor || defined(INCLUDE_GSONReflectionAccessor))
#define GSONReflectionAccessor_

@class JavaLangReflectAccessibleObject;

/*!
 @brief Provides a replacement for <code>AccessibleObject.setAccessible(boolean)</code>, which may be used to
  avoid reflective access issues appeared in Java 9, like <code>java.lang.reflect.InaccessibleObjectException</code>
  thrown or warnings like
 @code

    WARNING: An illegal reflective access operation has occurred
    WARNING: Illegal reflective access by ...
 @endcode
  <p>
  Works both for Java 9 and earlier Java versions.
 */
@interface GSONReflectionAccessor : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Obtains a <code>ReflectionAccessor</code> instance suitable for the current Java version.
 <p>
  You may need one a reflective operation in your code throws <code>java.lang.reflect.InaccessibleObjectException</code>.
  In such a case, use <code>ReflectionAccessor.makeAccessible(AccessibleObject)</code> on a field, method or constructor
  (instead of basic <code>AccessibleObject.setAccessible(boolean)</code>).
 */
+ (GSONReflectionAccessor *)getInstance;

/*!
 @brief Does the same as <code>ao.setAccessible(true)</code>, but never throws 
 <code>java.lang.reflect.InaccessibleObjectException</code>
 */
- (void)makeAccessibleWithJavaLangReflectAccessibleObject:(JavaLangReflectAccessibleObject *)ao;

@end

J2OBJC_STATIC_INIT(GSONReflectionAccessor)

FOUNDATION_EXPORT void GSONReflectionAccessor_init(GSONReflectionAccessor *self);

FOUNDATION_EXPORT GSONReflectionAccessor *GSONReflectionAccessor_getInstance();

J2OBJC_TYPE_LITERAL_HEADER(GSONReflectionAccessor)

@compatibility_alias ComGoogleGsonInternalReflectReflectionAccessor GSONReflectionAccessor;

#endif

#pragma pop_macro("INCLUDE_ALL_ReflectionAccessor")
