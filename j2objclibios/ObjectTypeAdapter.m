//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/internal/bind/ObjectTypeAdapter.java
//

#include "Gson.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JsonReader.h"
#include "JsonToken.h"
#include "JsonWriter.h"
#include "LinkedTreeMap.h"
#include "ObjectTypeAdapter.h"
#include "TypeAdapter.h"
#include "TypeAdapterFactory.h"
#include "TypeToken.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface GSONObjectTypeAdapter () {
 @public
  GSONGson *gson_;
}

@end

J2OBJC_FIELD_SETTER(GSONObjectTypeAdapter, gson_, GSONGson *)

@interface GSONObjectTypeAdapter_1 : NSObject < GSONTypeAdapterFactory >

- (instancetype)init;

- (GSONTypeAdapter *)createWithGSONGson:(GSONGson *)gson
                      withGSONTypeToken:(GSONTypeToken *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONObjectTypeAdapter_1)

__attribute__((unused)) static void GSONObjectTypeAdapter_1_init(GSONObjectTypeAdapter_1 *self);

__attribute__((unused)) static GSONObjectTypeAdapter_1 *new_GSONObjectTypeAdapter_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static GSONObjectTypeAdapter_1 *create_GSONObjectTypeAdapter_1_init();

J2OBJC_INITIALIZED_DEFN(GSONObjectTypeAdapter)

id<GSONTypeAdapterFactory> GSONObjectTypeAdapter_FACTORY;

@implementation GSONObjectTypeAdapter

- (instancetype)initWithGSONGson:(GSONGson *)gson {
  GSONObjectTypeAdapter_initWithGSONGson_(self, gson);
  return self;
}

- (id)readWithGSONJsonReader:(GSONJsonReader *)inArg {
  GSONJsonToken *token = [((GSONJsonReader *) nil_chk(inArg)) peek];
  {
    id<JavaUtilList> list;
    id<JavaUtilMap> map;
    switch ([token ordinal]) {
      case GSONJsonToken_Enum_BEGIN_ARRAY:
      list = new_JavaUtilArrayList_init();
      [inArg beginArray];
      while ([inArg hasNext]) {
        [list addWithId:[self readWithGSONJsonReader:inArg]];
      }
      [inArg endArray];
      return list;
      case GSONJsonToken_Enum_BEGIN_OBJECT:
      map = new_GSONLinkedTreeMap_init();
      [inArg beginObject];
      while ([inArg hasNext]) {
        (void) [map putWithId:[inArg nextName] withId:[self readWithGSONJsonReader:inArg]];
      }
      [inArg endObject];
      return map;
      case GSONJsonToken_Enum_STRING:
      return [inArg nextString];
      case GSONJsonToken_Enum_NUMBER:
      return JavaLangDouble_valueOfWithDouble_([inArg nextDouble]);
      case GSONJsonToken_Enum_BOOLEAN:
      return JavaLangBoolean_valueOfWithBoolean_([inArg nextBoolean]);
      case GSONJsonToken_Enum_NULL:
      [inArg nextNull];
      return nil;
      default:
      @throw new_JavaLangIllegalStateException_init();
    }
  }
}

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(id)value {
  if (value == nil) {
    (void) [((GSONJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  GSONTypeAdapter *typeAdapter = [((GSONGson *) nil_chk(gson_)) getAdapterWithIOSClass:[value java_getClass]];
  if ([typeAdapter isKindOfClass:[GSONObjectTypeAdapter class]]) {
    (void) [((GSONJsonWriter *) nil_chk(outArg)) beginObject];
    (void) [outArg endObject];
    return;
  }
  [((GSONTypeAdapter *) nil_chk(typeAdapter)) writeWithGSONJsonWriter:outArg withId:value];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithGSONGson:);
  methods[1].selector = @selector(readWithGSONJsonReader:);
  methods[2].selector = @selector(writeWithGSONJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FACTORY", "LGSONTypeAdapterFactory;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "gson_", "LGSONGson;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LGSONGson;", "read", "LGSONJsonReader;", "LJavaIoIOException;", "write", "LGSONJsonWriter;LNSObject;", &GSONObjectTypeAdapter_FACTORY, "Lcom/google/gson/TypeAdapter<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _GSONObjectTypeAdapter = { "ObjectTypeAdapter", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x11, 3, 2, -1, -1, -1, 7, -1 };
  return &_GSONObjectTypeAdapter;
}

+ (void)initialize {
  if (self == [GSONObjectTypeAdapter class]) {
    GSONObjectTypeAdapter_FACTORY = new_GSONObjectTypeAdapter_1_init();
    J2OBJC_SET_INITIALIZED(GSONObjectTypeAdapter)
  }
}

@end

void GSONObjectTypeAdapter_initWithGSONGson_(GSONObjectTypeAdapter *self, GSONGson *gson) {
  GSONTypeAdapter_init(self);
  self->gson_ = gson;
}

GSONObjectTypeAdapter *new_GSONObjectTypeAdapter_initWithGSONGson_(GSONGson *gson) {
  J2OBJC_NEW_IMPL(GSONObjectTypeAdapter, initWithGSONGson_, gson)
}

GSONObjectTypeAdapter *create_GSONObjectTypeAdapter_initWithGSONGson_(GSONGson *gson) {
  J2OBJC_CREATE_IMPL(GSONObjectTypeAdapter, initWithGSONGson_, gson)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GSONObjectTypeAdapter)

@implementation GSONObjectTypeAdapter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONObjectTypeAdapter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (GSONTypeAdapter *)createWithGSONGson:(GSONGson *)gson
                      withGSONTypeToken:(GSONTypeToken *)type {
  if ([((GSONTypeToken *) nil_chk(type)) getRawType] == NSObject_class_()) {
    return new_GSONObjectTypeAdapter_initWithGSONGson_(gson);
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONTypeAdapter;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createWithGSONGson:withGSONTypeToken:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "create", "LGSONGson;LGSONTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "LGSONObjectTypeAdapter;" };
  static const J2ObjcClassInfo _GSONObjectTypeAdapter_1 = { "", "com.google.gson.internal.bind", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, -1, -1 };
  return &_GSONObjectTypeAdapter_1;
}

@end

void GSONObjectTypeAdapter_1_init(GSONObjectTypeAdapter_1 *self) {
  NSObject_init(self);
}

GSONObjectTypeAdapter_1 *new_GSONObjectTypeAdapter_1_init() {
  J2OBJC_NEW_IMPL(GSONObjectTypeAdapter_1, init)
}

GSONObjectTypeAdapter_1 *create_GSONObjectTypeAdapter_1_init() {
  J2OBJC_CREATE_IMPL(GSONObjectTypeAdapter_1, init)
}
