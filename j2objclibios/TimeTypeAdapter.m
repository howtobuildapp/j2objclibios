//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/internal/bind/TimeTypeAdapter.java
//

#include "Gson.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JsonReader.h"
#include "JsonSyntaxException.h"
#include "JsonToken.h"
#include "JsonWriter.h"
#include "TimeTypeAdapter.h"
#include "TypeAdapter.h"
#include "TypeAdapterFactory.h"
#include "TypeToken.h"
#include "java/sql/Time.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface GSONTimeTypeAdapter () {
 @public
  JavaTextDateFormat *format_;
}

@end

J2OBJC_FIELD_SETTER(GSONTimeTypeAdapter, format_, JavaTextDateFormat *)

@interface GSONTimeTypeAdapter_1 : NSObject < GSONTypeAdapterFactory >

- (instancetype)init;

- (GSONTypeAdapter *)createWithGSONGson:(GSONGson *)gson
                      withGSONTypeToken:(GSONTypeToken *)typeToken;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONTimeTypeAdapter_1)

__attribute__((unused)) static void GSONTimeTypeAdapter_1_init(GSONTimeTypeAdapter_1 *self);

__attribute__((unused)) static GSONTimeTypeAdapter_1 *new_GSONTimeTypeAdapter_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static GSONTimeTypeAdapter_1 *create_GSONTimeTypeAdapter_1_init();

J2OBJC_INITIALIZED_DEFN(GSONTimeTypeAdapter)

id<GSONTypeAdapterFactory> GSONTimeTypeAdapter_FACTORY;

@implementation GSONTimeTypeAdapter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONTimeTypeAdapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaSqlTime *)readWithGSONJsonReader:(GSONJsonReader *)inArg {
  @synchronized(self) {
    if ([((GSONJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GSONJsonToken, NULL)) {
      [inArg nextNull];
      return nil;
    }
    @try {
      JavaUtilDate *date = [((JavaTextDateFormat *) nil_chk(format_)) parseWithNSString:[inArg nextString]];
      return new_JavaSqlTime_initWithLong_([((JavaUtilDate *) nil_chk(date)) getTime]);
    }
    @catch (JavaTextParseException *e) {
      @throw new_GSONJsonSyntaxException_initWithJavaLangThrowable_(e);
    }
  }
}

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(JavaSqlTime *)value {
  @synchronized(self) {
    (void) [((GSONJsonWriter *) nil_chk(outArg)) valueWithNSString:value == nil ? nil : [((JavaTextDateFormat *) nil_chk(format_)) formatWithJavaUtilDate:value]];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSqlTime;", 0x21, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readWithGSONJsonReader:);
  methods[2].selector = @selector(writeWithGSONJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FACTORY", "LGSONTypeAdapterFactory;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "format_", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "read", "LGSONJsonReader;", "LJavaIoIOException;", "write", "LGSONJsonWriter;LJavaSqlTime;", &GSONTimeTypeAdapter_FACTORY, "Lcom/google/gson/TypeAdapter<Ljava/sql/Time;>;" };
  static const J2ObjcClassInfo _GSONTimeTypeAdapter = { "TimeTypeAdapter", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x11, 3, 2, -1, -1, -1, 6, -1 };
  return &_GSONTimeTypeAdapter;
}

+ (void)initialize {
  if (self == [GSONTimeTypeAdapter class]) {
    GSONTimeTypeAdapter_FACTORY = new_GSONTimeTypeAdapter_1_init();
    J2OBJC_SET_INITIALIZED(GSONTimeTypeAdapter)
  }
}

@end

void GSONTimeTypeAdapter_init(GSONTimeTypeAdapter *self) {
  GSONTypeAdapter_init(self);
  self->format_ = new_JavaTextSimpleDateFormat_initWithNSString_(@"hh:mm:ss a");
}

GSONTimeTypeAdapter *new_GSONTimeTypeAdapter_init() {
  J2OBJC_NEW_IMPL(GSONTimeTypeAdapter, init)
}

GSONTimeTypeAdapter *create_GSONTimeTypeAdapter_init() {
  J2OBJC_CREATE_IMPL(GSONTimeTypeAdapter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GSONTimeTypeAdapter)

@implementation GSONTimeTypeAdapter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONTimeTypeAdapter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (GSONTypeAdapter *)createWithGSONGson:(GSONGson *)gson
                      withGSONTypeToken:(GSONTypeToken *)typeToken {
  return [((GSONTypeToken *) nil_chk(typeToken)) getRawType] == JavaSqlTime_class_() ? new_GSONTimeTypeAdapter_init() : nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONTypeAdapter;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createWithGSONGson:withGSONTypeToken:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "create", "LGSONGson;LGSONTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "LGSONTimeTypeAdapter;" };
  static const J2ObjcClassInfo _GSONTimeTypeAdapter_1 = { "", "com.google.gson.internal.bind", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, -1, -1 };
  return &_GSONTimeTypeAdapter_1;
}

@end

void GSONTimeTypeAdapter_1_init(GSONTimeTypeAdapter_1 *self) {
  NSObject_init(self);
}

GSONTimeTypeAdapter_1 *new_GSONTimeTypeAdapter_1_init() {
  J2OBJC_NEW_IMPL(GSONTimeTypeAdapter_1, init)
}

GSONTimeTypeAdapter_1 *create_GSONTimeTypeAdapter_1_init() {
  J2OBJC_CREATE_IMPL(GSONTimeTypeAdapter_1, init)
}
