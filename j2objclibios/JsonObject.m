//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/JsonObject.java
//

#include "J2ObjC_source.h"
#include "JsonArray.h"
#include "JsonElement.h"
#include "JsonNull.h"
#include "JsonObject.h"
#include "JsonPrimitive.h"
#include "LinkedTreeMap.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface GSONJsonObject () {
 @public
  GSONLinkedTreeMap *members_;
}

@end

J2OBJC_FIELD_SETTER(GSONJsonObject, members_, GSONLinkedTreeMap *)

@implementation GSONJsonObject

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONJsonObject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (GSONJsonObject *)deepCopy {
  GSONJsonObject *result = new_GSONJsonObject_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((GSONLinkedTreeMap *) nil_chk(members_)) entrySet])) {
    [result addWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withGSONJsonElement:[((GSONJsonElement *) nil_chk([entry_ getValue])) deepCopy]];
  }
  return result;
}

- (void)addWithNSString:(NSString *)property
    withGSONJsonElement:(GSONJsonElement *)value {
  (void) [((GSONLinkedTreeMap *) nil_chk(members_)) putWithId:property withId:value == nil ? JreLoadStatic(GSONJsonNull, INSTANCE) : value];
}

- (GSONJsonElement *)removeWithNSString:(NSString *)property {
  return [((GSONLinkedTreeMap *) nil_chk(members_)) removeWithId:property];
}

- (void)addPropertyWithNSString:(NSString *)property
                   withNSString:(NSString *)value {
  [self addWithNSString:property withGSONJsonElement:value == nil ? JreLoadStatic(GSONJsonNull, INSTANCE) : (id) new_GSONJsonPrimitive_initWithNSString_(value)];
}

- (void)addPropertyWithNSString:(NSString *)property
                   withNSNumber:(NSNumber *)value {
  [self addWithNSString:property withGSONJsonElement:value == nil ? JreLoadStatic(GSONJsonNull, INSTANCE) : (id) new_GSONJsonPrimitive_initWithNSNumber_(value)];
}

- (void)addPropertyWithNSString:(NSString *)property
            withJavaLangBoolean:(JavaLangBoolean *)value {
  [self addWithNSString:property withGSONJsonElement:value == nil ? JreLoadStatic(GSONJsonNull, INSTANCE) : (id) new_GSONJsonPrimitive_initWithJavaLangBoolean_(value)];
}

- (void)addPropertyWithNSString:(NSString *)property
          withJavaLangCharacter:(JavaLangCharacter *)value {
  [self addWithNSString:property withGSONJsonElement:value == nil ? JreLoadStatic(GSONJsonNull, INSTANCE) : (id) new_GSONJsonPrimitive_initWithJavaLangCharacter_(value)];
}

- (id<JavaUtilSet>)entrySet {
  return [((GSONLinkedTreeMap *) nil_chk(members_)) entrySet];
}

- (id<JavaUtilSet>)keySet {
  return [((GSONLinkedTreeMap *) nil_chk(members_)) keySet];
}

- (jint)size {
  return [((GSONLinkedTreeMap *) nil_chk(members_)) size];
}

- (jboolean)hasWithNSString:(NSString *)memberName {
  return [((GSONLinkedTreeMap *) nil_chk(members_)) containsKeyWithId:memberName];
}

- (GSONJsonElement *)getWithNSString:(NSString *)memberName {
  return [((GSONLinkedTreeMap *) nil_chk(members_)) getWithId:memberName];
}

- (GSONJsonPrimitive *)getAsJsonPrimitiveWithNSString:(NSString *)memberName {
  return (GSONJsonPrimitive *) cast_chk([((GSONLinkedTreeMap *) nil_chk(members_)) getWithId:memberName], [GSONJsonPrimitive class]);
}

- (GSONJsonArray *)getAsJsonArrayWithNSString:(NSString *)memberName {
  return (GSONJsonArray *) cast_chk([((GSONLinkedTreeMap *) nil_chk(members_)) getWithId:memberName], [GSONJsonArray class]);
}

- (GSONJsonObject *)getAsJsonObjectWithNSString:(NSString *)memberName {
  return (GSONJsonObject *) cast_chk([((GSONLinkedTreeMap *) nil_chk(members_)) getWithId:memberName], [GSONJsonObject class]);
}

- (jboolean)isEqual:(id)o {
  return (o == self) || ([o isKindOfClass:[GSONJsonObject class]] && [((GSONLinkedTreeMap *) nil_chk(((GSONJsonObject *) nil_chk(((GSONJsonObject *) cast_chk(o, [GSONJsonObject class]))))->members_)) isEqual:members_]);
}

- (NSUInteger)hash {
  return ((jint) [((GSONLinkedTreeMap *) nil_chk(members_)) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONJsonObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LGSONJsonElement;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "LGSONJsonElement;", 0x1, 12, 3, -1, -1, -1, -1 },
    { NULL, "LGSONJsonPrimitive;", 0x1, 13, 3, -1, -1, -1, -1 },
    { NULL, "LGSONJsonArray;", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "LGSONJsonObject;", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(deepCopy);
  methods[2].selector = @selector(addWithNSString:withGSONJsonElement:);
  methods[3].selector = @selector(removeWithNSString:);
  methods[4].selector = @selector(addPropertyWithNSString:withNSString:);
  methods[5].selector = @selector(addPropertyWithNSString:withNSNumber:);
  methods[6].selector = @selector(addPropertyWithNSString:withJavaLangBoolean:);
  methods[7].selector = @selector(addPropertyWithNSString:withJavaLangCharacter:);
  methods[8].selector = @selector(entrySet);
  methods[9].selector = @selector(keySet);
  methods[10].selector = @selector(size);
  methods[11].selector = @selector(hasWithNSString:);
  methods[12].selector = @selector(getWithNSString:);
  methods[13].selector = @selector(getAsJsonPrimitiveWithNSString:);
  methods[14].selector = @selector(getAsJsonArrayWithNSString:);
  methods[15].selector = @selector(getAsJsonObjectWithNSString:);
  methods[16].selector = @selector(isEqual:);
  methods[17].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "members_", "LGSONLinkedTreeMap;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
  };
  static const void *ptrTable[] = { "add", "LNSString;LGSONJsonElement;", "remove", "LNSString;", "addProperty", "LNSString;LNSString;", "LNSString;LNSNumber;", "LNSString;LJavaLangBoolean;", "LNSString;LJavaLangCharacter;", "()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Lcom/google/gson/JsonElement;>;>;", "()Ljava/util/Set<Ljava/lang/String;>;", "has", "get", "getAsJsonPrimitive", "getAsJsonArray", "getAsJsonObject", "equals", "LNSObject;", "hashCode", "Lcom/google/gson/internal/LinkedTreeMap<Ljava/lang/String;Lcom/google/gson/JsonElement;>;" };
  static const J2ObjcClassInfo _GSONJsonObject = { "JsonObject", "com.google.gson", ptrTable, methods, fields, 7, 0x11, 18, 1, -1, -1, -1, -1, -1 };
  return &_GSONJsonObject;
}

@end

void GSONJsonObject_init(GSONJsonObject *self) {
  GSONJsonElement_init(self);
  self->members_ = new_GSONLinkedTreeMap_init();
}

GSONJsonObject *new_GSONJsonObject_init() {
  J2OBJC_NEW_IMPL(GSONJsonObject, init)
}

GSONJsonObject *create_GSONJsonObject_init() {
  J2OBJC_CREATE_IMPL(GSONJsonObject, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GSONJsonObject)
