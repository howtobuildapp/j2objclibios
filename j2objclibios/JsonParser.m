//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/JsonParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "JsonElement.h"
#include "JsonIOException.h"
#include "JsonParseException.h"
#include "JsonParser.h"
#include "JsonReader.h"
#include "JsonSyntaxException.h"
#include "JsonToken.h"
#include "MalformedJsonException.h"
#include "Streams.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/Deprecated.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/StackOverflowError.h"
#include "java/lang/annotation/Annotation.h"

__attribute__((unused)) static IOSObjectArray *GSONJsonParser__Annotations$0();

__attribute__((unused)) static IOSObjectArray *GSONJsonParser__Annotations$1();

__attribute__((unused)) static IOSObjectArray *GSONJsonParser__Annotations$2();

__attribute__((unused)) static IOSObjectArray *GSONJsonParser__Annotations$3();

@implementation GSONJsonParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONJsonParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (GSONJsonElement *)parseStringWithNSString:(NSString *)json {
  return GSONJsonParser_parseStringWithNSString_(json);
}

+ (GSONJsonElement *)parseReaderWithJavaIoReader:(JavaIoReader *)reader {
  return GSONJsonParser_parseReaderWithJavaIoReader_(reader);
}

+ (GSONJsonElement *)parseReaderWithGSONJsonReader:(GSONJsonReader *)reader {
  return GSONJsonParser_parseReaderWithGSONJsonReader_(reader);
}

- (GSONJsonElement *)parseWithNSString:(NSString *)json {
  return GSONJsonParser_parseStringWithNSString_(json);
}

- (GSONJsonElement *)parseWithJavaIoReader:(JavaIoReader *)json {
  return GSONJsonParser_parseReaderWithJavaIoReader_(json);
}

- (GSONJsonElement *)parseWithGSONJsonReader:(GSONJsonReader *)json {
  return GSONJsonParser_parseReaderWithGSONJsonReader_(json);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "LGSONJsonElement;", 0x9, 1, 2, 3, -1, -1, -1 },
    { NULL, "LGSONJsonElement;", 0x9, 4, 5, 6, -1, -1, -1 },
    { NULL, "LGSONJsonElement;", 0x9, 4, 7, 6, -1, -1, -1 },
    { NULL, "LGSONJsonElement;", 0x1, 8, 2, 3, -1, 9, -1 },
    { NULL, "LGSONJsonElement;", 0x1, 8, 5, 6, -1, 10, -1 },
    { NULL, "LGSONJsonElement;", 0x1, 8, 7, 6, -1, 11, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseStringWithNSString:);
  methods[2].selector = @selector(parseReaderWithJavaIoReader:);
  methods[3].selector = @selector(parseReaderWithGSONJsonReader:);
  methods[4].selector = @selector(parseWithNSString:);
  methods[5].selector = @selector(parseWithJavaIoReader:);
  methods[6].selector = @selector(parseWithGSONJsonReader:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&GSONJsonParser__Annotations$0, "parseString", "LNSString;", "LGSONJsonSyntaxException;", "parseReader", "LJavaIoReader;", "LGSONJsonIOException;LGSONJsonSyntaxException;", "LGSONJsonReader;", "parse", (void *)&GSONJsonParser__Annotations$1, (void *)&GSONJsonParser__Annotations$2, (void *)&GSONJsonParser__Annotations$3 };
  static const J2ObjcClassInfo _GSONJsonParser = { "JsonParser", "com.google.gson", ptrTable, methods, NULL, 7, 0x11, 7, 0, -1, -1, -1, -1, -1 };
  return &_GSONJsonParser;
}

@end

void GSONJsonParser_init(GSONJsonParser *self) {
  NSObject_init(self);
}

GSONJsonParser *new_GSONJsonParser_init() {
  J2OBJC_NEW_IMPL(GSONJsonParser, init)
}

GSONJsonParser *create_GSONJsonParser_init() {
  J2OBJC_CREATE_IMPL(GSONJsonParser, init)
}

GSONJsonElement *GSONJsonParser_parseStringWithNSString_(NSString *json) {
  GSONJsonParser_initialize();
  return GSONJsonParser_parseReaderWithJavaIoReader_(new_JavaIoStringReader_initWithNSString_(json));
}

GSONJsonElement *GSONJsonParser_parseReaderWithJavaIoReader_(JavaIoReader *reader) {
  GSONJsonParser_initialize();
  @try {
    GSONJsonReader *jsonReader = new_GSONJsonReader_initWithJavaIoReader_(reader);
    GSONJsonElement *element = GSONJsonParser_parseReaderWithGSONJsonReader_(jsonReader);
    if (![((GSONJsonElement *) nil_chk(element)) isJsonNull] && [jsonReader peek] != JreLoadEnum(GSONJsonToken, END_DOCUMENT)) {
      @throw new_GSONJsonSyntaxException_initWithNSString_(@"Did not consume the entire document.");
    }
    return element;
  }
  @catch (GSONMalformedJsonException *e) {
    @throw new_GSONJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaIoIOException *e) {
    @throw new_GSONJsonIOException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw new_GSONJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
}

GSONJsonElement *GSONJsonParser_parseReaderWithGSONJsonReader_(GSONJsonReader *reader) {
  GSONJsonParser_initialize();
  jboolean lenient = [((GSONJsonReader *) nil_chk(reader)) isLenient];
  [reader setLenientWithBoolean:true];
  @try {
    return GSONStreams_parseWithGSONJsonReader_(reader);
  }
  @catch (JavaLangStackOverflowError *e) {
    @throw new_GSONJsonParseException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@$", @"Failed parsing JSON source: ", reader, @" to Json"), e);
  }
  @catch (JavaLangOutOfMemoryError *e) {
    @throw new_GSONJsonParseException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@$", @"Failed parsing JSON source: ", reader, @" to Json"), e);
  }
  @finally {
    [reader setLenientWithBoolean:lenient];
  }
}

IOSObjectArray *GSONJsonParser__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *GSONJsonParser__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *GSONJsonParser__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *GSONJsonParser__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GSONJsonParser)
