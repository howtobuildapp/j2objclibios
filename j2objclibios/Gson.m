//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/Gson.java
//

#include "ArrayTypeAdapter.h"
#include "CollectionTypeAdapterFactory.h"
#include "ConstructorConstructor.h"
#include "DateTypeAdapter.h"
#include "Excluder.h"
#include "FieldNamingPolicy.h"
#include "FieldNamingStrategy.h"
#include "Gson.h"
#include "GsonBuildConfig.h"
#include "GsonBuilder.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JsonAdapterAnnotationTypeAdapterFactory.h"
#include "JsonElement.h"
#include "JsonIOException.h"
#include "JsonNull.h"
#include "JsonReader.h"
#include "JsonSyntaxException.h"
#include "JsonToken.h"
#include "JsonTreeReader.h"
#include "JsonTreeWriter.h"
#include "JsonWriter.h"
#include "LongSerializationPolicy.h"
#include "MalformedJsonException.h"
#include "MapTypeAdapterFactory.h"
#include "ObjectTypeAdapter.h"
#include "Primitives.h"
#include "ReflectiveTypeAdapterFactory.h"
#include "SqlDateTypeAdapter.h"
#include "Streams.h"
#include "TimeTypeAdapter.h"
#include "TypeAdapter.h"
#include "TypeAdapterFactory.h"
#include "TypeAdapters.h"
#include "TypeToken.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Appendable.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Type.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/text/DateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicLongArray.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface GSONGson () {
 @public
  /*!
   @brief This thread local guards against reentrant calls to getAdapter().In
  certain object graphs, creating an adapter for a type may recursively
  require an adapter for the same type!
   Without intervention, the recursive
  lookup would stack overflow. We cheat by returning a proxy type adapter.
  The proxy is wired up once the initial adapter has been created.
   */
  JavaLangThreadLocal *calls_;
  id<JavaUtilMap> typeTokenCache_;
  GSONConstructorConstructor *constructorConstructor_;
  GSONJsonAdapterAnnotationTypeAdapterFactory *jsonAdapterFactory_;
}

- (GSONTypeAdapter *)doubleAdapterWithBoolean:(jboolean)serializeSpecialFloatingPointValues;

- (GSONTypeAdapter *)floatAdapterWithBoolean:(jboolean)serializeSpecialFloatingPointValues;

+ (GSONTypeAdapter *)longAdapterWithGSONLongSerializationPolicy:(GSONLongSerializationPolicy *)longSerializationPolicy;

+ (GSONTypeAdapter *)atomicLongAdapterWithGSONTypeAdapter:(GSONTypeAdapter *)longAdapter;

+ (GSONTypeAdapter *)atomicLongArrayAdapterWithGSONTypeAdapter:(GSONTypeAdapter *)longAdapter;

+ (void)assertFullConsumptionWithId:(id)obj
                 withGSONJsonReader:(GSONJsonReader *)reader;

@end

J2OBJC_FIELD_SETTER(GSONGson, calls_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(GSONGson, typeTokenCache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(GSONGson, constructorConstructor_, GSONConstructorConstructor *)
J2OBJC_FIELD_SETTER(GSONGson, jsonAdapterFactory_, GSONJsonAdapterAnnotationTypeAdapterFactory *)

inline GSONTypeToken *GSONGson_get_NULL_KEY_SURROGATE();
static GSONTypeToken *GSONGson_NULL_KEY_SURROGATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GSONGson, NULL_KEY_SURROGATE, GSONTypeToken *)

inline NSString *GSONGson_get_JSON_NON_EXECUTABLE_PREFIX();
static NSString *GSONGson_JSON_NON_EXECUTABLE_PREFIX = @")]}'\n";
J2OBJC_STATIC_FIELD_OBJ_FINAL(GSONGson, JSON_NON_EXECUTABLE_PREFIX, NSString *)

__attribute__((unused)) static GSONTypeAdapter *GSONGson_doubleAdapterWithBoolean_(GSONGson *self, jboolean serializeSpecialFloatingPointValues);

__attribute__((unused)) static GSONTypeAdapter *GSONGson_floatAdapterWithBoolean_(GSONGson *self, jboolean serializeSpecialFloatingPointValues);

__attribute__((unused)) static GSONTypeAdapter *GSONGson_longAdapterWithGSONLongSerializationPolicy_(GSONLongSerializationPolicy *longSerializationPolicy);

__attribute__((unused)) static GSONTypeAdapter *GSONGson_atomicLongAdapterWithGSONTypeAdapter_(GSONTypeAdapter *longAdapter);

__attribute__((unused)) static GSONTypeAdapter *GSONGson_atomicLongArrayAdapterWithGSONTypeAdapter_(GSONTypeAdapter *longAdapter);

__attribute__((unused)) static void GSONGson_assertFullConsumptionWithId_withGSONJsonReader_(id obj, GSONJsonReader *reader);

@interface GSONGson_1 : GSONTypeAdapter

- (instancetype)init;

- (JavaLangDouble *)readWithGSONJsonReader:(GSONJsonReader *)inArg;

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(NSNumber *)value;

- (NSNumber *)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (NSNumber *)fromJsonTreeWithGSONJsonElement:(GSONJsonElement *)arg0;

- (NSNumber *)fromJsonWithNSString:(NSString *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONGson_1)

__attribute__((unused)) static void GSONGson_1_init(GSONGson_1 *self);

__attribute__((unused)) static GSONGson_1 *new_GSONGson_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static GSONGson_1 *create_GSONGson_1_init();

@interface GSONGson_2 : GSONTypeAdapter

- (instancetype)init;

- (JavaLangFloat *)readWithGSONJsonReader:(GSONJsonReader *)inArg;

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(NSNumber *)value;

- (NSNumber *)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (NSNumber *)fromJsonTreeWithGSONJsonElement:(GSONJsonElement *)arg0;

- (NSNumber *)fromJsonWithNSString:(NSString *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONGson_2)

__attribute__((unused)) static void GSONGson_2_init(GSONGson_2 *self);

__attribute__((unused)) static GSONGson_2 *new_GSONGson_2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static GSONGson_2 *create_GSONGson_2_init();

@interface GSONGson_3 : GSONTypeAdapter

- (instancetype)init;

- (NSNumber *)readWithGSONJsonReader:(GSONJsonReader *)inArg;

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(NSNumber *)value;

- (NSNumber *)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (NSNumber *)fromJsonTreeWithGSONJsonElement:(GSONJsonElement *)arg0;

- (NSNumber *)fromJsonWithNSString:(NSString *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONGson_3)

__attribute__((unused)) static void GSONGson_3_init(GSONGson_3 *self);

__attribute__((unused)) static GSONGson_3 *new_GSONGson_3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static GSONGson_3 *create_GSONGson_3_init();

@interface GSONGson_4 : GSONTypeAdapter {
 @public
  GSONTypeAdapter *val$longAdapter_;
}

- (instancetype)initWithGSONTypeAdapter:(GSONTypeAdapter *)capture$0;

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(JavaUtilConcurrentAtomicAtomicLong *)value;

- (JavaUtilConcurrentAtomicAtomicLong *)readWithGSONJsonReader:(GSONJsonReader *)inArg;

- (JavaUtilConcurrentAtomicAtomicLong *)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (JavaUtilConcurrentAtomicAtomicLong *)fromJsonTreeWithGSONJsonElement:(GSONJsonElement *)arg0;

- (JavaUtilConcurrentAtomicAtomicLong *)fromJsonWithNSString:(NSString *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONGson_4)

__attribute__((unused)) static void GSONGson_4_initWithGSONTypeAdapter_(GSONGson_4 *self, GSONTypeAdapter *capture$0);

__attribute__((unused)) static GSONGson_4 *new_GSONGson_4_initWithGSONTypeAdapter_(GSONTypeAdapter *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static GSONGson_4 *create_GSONGson_4_initWithGSONTypeAdapter_(GSONTypeAdapter *capture$0);

@interface GSONGson_5 : GSONTypeAdapter {
 @public
  GSONTypeAdapter *val$longAdapter_;
}

- (instancetype)initWithGSONTypeAdapter:(GSONTypeAdapter *)capture$0;

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(JavaUtilConcurrentAtomicAtomicLongArray *)value;

- (JavaUtilConcurrentAtomicAtomicLongArray *)readWithGSONJsonReader:(GSONJsonReader *)inArg;

- (JavaUtilConcurrentAtomicAtomicLongArray *)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (JavaUtilConcurrentAtomicAtomicLongArray *)fromJsonTreeWithGSONJsonElement:(GSONJsonElement *)arg0;

- (JavaUtilConcurrentAtomicAtomicLongArray *)fromJsonWithNSString:(NSString *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONGson_5)

__attribute__((unused)) static void GSONGson_5_initWithGSONTypeAdapter_(GSONGson_5 *self, GSONTypeAdapter *capture$0);

__attribute__((unused)) static GSONGson_5 *new_GSONGson_5_initWithGSONTypeAdapter_(GSONTypeAdapter *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static GSONGson_5 *create_GSONGson_5_initWithGSONTypeAdapter_(GSONTypeAdapter *capture$0);

@interface GSONGson_FutureTypeAdapter () {
 @public
  GSONTypeAdapter *delegate_;
}

@end

J2OBJC_FIELD_SETTER(GSONGson_FutureTypeAdapter, delegate_, GSONTypeAdapter *)

J2OBJC_INITIALIZED_DEFN(GSONGson)

@implementation GSONGson

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONGson_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithGSONExcluder:(GSONExcluder *)excluder
         withGSONFieldNamingStrategy:(id<GSONFieldNamingStrategy>)fieldNamingStrategy
                     withJavaUtilMap:(id<JavaUtilMap>)instanceCreators
                         withBoolean:(jboolean)serializeNulls
                         withBoolean:(jboolean)complexMapKeySerialization
                         withBoolean:(jboolean)generateNonExecutableGson
                         withBoolean:(jboolean)htmlSafe
                         withBoolean:(jboolean)prettyPrinting
                         withBoolean:(jboolean)lenient
                         withBoolean:(jboolean)serializeSpecialFloatingPointValues
     withGSONLongSerializationPolicy:(GSONLongSerializationPolicy *)longSerializationPolicy
                        withNSString:(NSString *)datePattern
                             withInt:(jint)dateStyle
                             withInt:(jint)timeStyle
                    withJavaUtilList:(id<JavaUtilList>)builderFactories
                    withJavaUtilList:(id<JavaUtilList>)builderHierarchyFactories
                    withJavaUtilList:(id<JavaUtilList>)factoriesToBeAdded {
  GSONGson_initWithGSONExcluder_withGSONFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGSONLongSerializationPolicy_withNSString_withInt_withInt_withJavaUtilList_withJavaUtilList_withJavaUtilList_(self, excluder, fieldNamingStrategy, instanceCreators, serializeNulls, complexMapKeySerialization, generateNonExecutableGson, htmlSafe, prettyPrinting, lenient, serializeSpecialFloatingPointValues, longSerializationPolicy, datePattern, dateStyle, timeStyle, builderFactories, builderHierarchyFactories, factoriesToBeAdded);
  return self;
}

- (GSONGsonBuilder *)newBuilder {
  return new_GSONGsonBuilder_initWithGSONGson_(self);
}

- (GSONExcluder *)excluder {
  return excluder_;
}

- (id<GSONFieldNamingStrategy>)fieldNamingStrategy {
  return fieldNamingStrategy_;
}

- (jboolean)serializeNulls {
  return serializeNulls_;
}

- (jboolean)htmlSafe {
  return htmlSafe_;
}

- (GSONTypeAdapter *)doubleAdapterWithBoolean:(jboolean)serializeSpecialFloatingPointValues {
  return GSONGson_doubleAdapterWithBoolean_(self, serializeSpecialFloatingPointValues);
}

- (GSONTypeAdapter *)floatAdapterWithBoolean:(jboolean)serializeSpecialFloatingPointValues {
  return GSONGson_floatAdapterWithBoolean_(self, serializeSpecialFloatingPointValues);
}

+ (void)checkValidFloatingPointWithDouble:(jdouble)value {
  GSONGson_checkValidFloatingPointWithDouble_(value);
}

+ (GSONTypeAdapter *)longAdapterWithGSONLongSerializationPolicy:(GSONLongSerializationPolicy *)longSerializationPolicy {
  return GSONGson_longAdapterWithGSONLongSerializationPolicy_(longSerializationPolicy);
}

+ (GSONTypeAdapter *)atomicLongAdapterWithGSONTypeAdapter:(GSONTypeAdapter *)longAdapter {
  return GSONGson_atomicLongAdapterWithGSONTypeAdapter_(longAdapter);
}

+ (GSONTypeAdapter *)atomicLongArrayAdapterWithGSONTypeAdapter:(GSONTypeAdapter *)longAdapter {
  return GSONGson_atomicLongArrayAdapterWithGSONTypeAdapter_(longAdapter);
}

- (GSONTypeAdapter *)getAdapterWithGSONTypeToken:(GSONTypeToken *)type {
  GSONTypeAdapter *cached = [((id<JavaUtilMap>) nil_chk(typeTokenCache_)) getWithId:type == nil ? GSONGson_NULL_KEY_SURROGATE : type];
  if (cached != nil) {
    return cached;
  }
  id<JavaUtilMap> threadCalls = [((JavaLangThreadLocal *) nil_chk(calls_)) get];
  jboolean requiresThreadLocalCleanup = false;
  if (threadCalls == nil) {
    threadCalls = new_JavaUtilHashMap_init();
    [calls_ setWithId:threadCalls];
    requiresThreadLocalCleanup = true;
  }
  GSONGson_FutureTypeAdapter *ongoingCall = [threadCalls getWithId:type];
  if (ongoingCall != nil) {
    return ongoingCall;
  }
  @try {
    GSONGson_FutureTypeAdapter *call = new_GSONGson_FutureTypeAdapter_init();
    (void) [threadCalls putWithId:type withId:call];
    for (id<GSONTypeAdapterFactory> __strong factory in nil_chk(factories_)) {
      GSONTypeAdapter *candidate = [((id<GSONTypeAdapterFactory>) nil_chk(factory)) createWithGSONGson:self withGSONTypeToken:type];
      if (candidate != nil) {
        [call setDelegateWithGSONTypeAdapter:candidate];
        (void) [typeTokenCache_ putWithId:type withId:candidate];
        return candidate;
      }
    }
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$@", @"GSON (", GSONGsonBuildConfig_VERSION, @") cannot handle ", type));
  }
  @finally {
    (void) [threadCalls removeWithId:type];
    if (requiresThreadLocalCleanup) {
      [calls_ remove];
    }
  }
}

- (GSONTypeAdapter *)getDelegateAdapterWithGSONTypeAdapterFactory:(id<GSONTypeAdapterFactory>)skipPast
                                                withGSONTypeToken:(GSONTypeToken *)type {
  if (![((id<JavaUtilList>) nil_chk(factories_)) containsWithId:skipPast]) {
    skipPast = jsonAdapterFactory_;
  }
  jboolean skipPastFound = false;
  for (id<GSONTypeAdapterFactory> __strong factory in factories_) {
    if (!skipPastFound) {
      if (factory == skipPast) {
        skipPastFound = true;
      }
      continue;
    }
    GSONTypeAdapter *candidate = [((id<GSONTypeAdapterFactory>) nil_chk(factory)) createWithGSONGson:self withGSONTypeToken:type];
    if (candidate != nil) {
      return candidate;
    }
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"GSON cannot serialize ", type));
}

- (GSONTypeAdapter *)getAdapterWithIOSClass:(IOSClass *)type {
  return [self getAdapterWithGSONTypeToken:GSONTypeToken_getWithIOSClass_(type)];
}

- (GSONJsonElement *)toJsonTreeWithId:(id)src {
  if (src == nil) {
    return JreLoadStatic(GSONJsonNull, INSTANCE);
  }
  return [self toJsonTreeWithId:src withJavaLangReflectType:[src java_getClass]];
}

- (GSONJsonElement *)toJsonTreeWithId:(id)src
              withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc {
  GSONJsonTreeWriter *writer = new_GSONJsonTreeWriter_init();
  [self toJsonWithId:src withJavaLangReflectType:typeOfSrc withGSONJsonWriter:writer];
  return [writer get];
}

- (NSString *)toJsonWithId:(id)src {
  if (src == nil) {
    return [self toJsonWithGSONJsonElement:JreLoadStatic(GSONJsonNull, INSTANCE)];
  }
  return [self toJsonWithId:src withJavaLangReflectType:[src java_getClass]];
}

- (NSString *)toJsonWithId:(id)src
   withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc {
  JavaIoStringWriter *writer = new_JavaIoStringWriter_init();
  [self toJsonWithId:src withJavaLangReflectType:typeOfSrc withJavaLangAppendable:writer];
  return [writer description];
}

- (void)toJsonWithId:(id)src
withJavaLangAppendable:(id<JavaLangAppendable>)writer {
  if (src != nil) {
    [self toJsonWithId:src withJavaLangReflectType:[src java_getClass] withJavaLangAppendable:writer];
  }
  else {
    [self toJsonWithGSONJsonElement:JreLoadStatic(GSONJsonNull, INSTANCE) withJavaLangAppendable:writer];
  }
}

- (void)toJsonWithId:(id)src
withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc
withJavaLangAppendable:(id<JavaLangAppendable>)writer {
  @try {
    GSONJsonWriter *jsonWriter = [self newJsonWriterWithJavaIoWriter:GSONStreams_writerForAppendableWithJavaLangAppendable_(writer)];
    [self toJsonWithId:src withJavaLangReflectType:typeOfSrc withGSONJsonWriter:jsonWriter];
  }
  @catch (JavaIoIOException *e) {
    @throw new_GSONJsonIOException_initWithJavaLangThrowable_(e);
  }
}

- (void)toJsonWithId:(id)src
withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc
  withGSONJsonWriter:(GSONJsonWriter *)writer {
  GSONTypeAdapter *adapter = [self getAdapterWithGSONTypeToken:GSONTypeToken_getWithJavaLangReflectType_(typeOfSrc)];
  jboolean oldLenient = [((GSONJsonWriter *) nil_chk(writer)) isLenient];
  [writer setLenientWithBoolean:true];
  jboolean oldHtmlSafe = [writer isHtmlSafe];
  [writer setHtmlSafeWithBoolean:htmlSafe_];
  jboolean oldSerializeNulls = [writer getSerializeNulls];
  [writer setSerializeNullsWithBoolean:serializeNulls_];
  @try {
    [((GSONTypeAdapter *) nil_chk((adapter))) writeWithGSONJsonWriter:writer withId:src];
  }
  @catch (JavaIoIOException *e) {
    @throw new_GSONJsonIOException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaLangAssertionError *e) {
    JavaLangAssertionError *error = new_JavaLangAssertionError_initWithId_(JreStrcat("$$$$", @"AssertionError (GSON ", GSONGsonBuildConfig_VERSION, @"): ", [e getMessage]));
    (void) [error initCauseWithJavaLangThrowable:e];
    @throw error;
  }
  @finally {
    [writer setLenientWithBoolean:oldLenient];
    [writer setHtmlSafeWithBoolean:oldHtmlSafe];
    [writer setSerializeNullsWithBoolean:oldSerializeNulls];
  }
}

- (NSString *)toJsonWithGSONJsonElement:(GSONJsonElement *)jsonElement {
  JavaIoStringWriter *writer = new_JavaIoStringWriter_init();
  [self toJsonWithGSONJsonElement:jsonElement withJavaLangAppendable:writer];
  return [writer description];
}

- (void)toJsonWithGSONJsonElement:(GSONJsonElement *)jsonElement
           withJavaLangAppendable:(id<JavaLangAppendable>)writer {
  @try {
    GSONJsonWriter *jsonWriter = [self newJsonWriterWithJavaIoWriter:GSONStreams_writerForAppendableWithJavaLangAppendable_(writer)];
    [self toJsonWithGSONJsonElement:jsonElement withGSONJsonWriter:jsonWriter];
  }
  @catch (JavaIoIOException *e) {
    @throw new_GSONJsonIOException_initWithJavaLangThrowable_(e);
  }
}

- (GSONJsonWriter *)newJsonWriterWithJavaIoWriter:(JavaIoWriter *)writer {
  if (generateNonExecutableJson_) {
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:GSONGson_JSON_NON_EXECUTABLE_PREFIX];
  }
  GSONJsonWriter *jsonWriter = new_GSONJsonWriter_initWithJavaIoWriter_(writer);
  if (prettyPrinting_) {
    [jsonWriter setIndentWithNSString:@"  "];
  }
  [jsonWriter setSerializeNullsWithBoolean:serializeNulls_];
  return jsonWriter;
}

- (GSONJsonReader *)newJsonReaderWithJavaIoReader:(JavaIoReader *)reader {
  GSONJsonReader *jsonReader = new_GSONJsonReader_initWithJavaIoReader_(reader);
  [jsonReader setLenientWithBoolean:lenient_];
  return jsonReader;
}

- (void)toJsonWithGSONJsonElement:(GSONJsonElement *)jsonElement
               withGSONJsonWriter:(GSONJsonWriter *)writer {
  jboolean oldLenient = [((GSONJsonWriter *) nil_chk(writer)) isLenient];
  [writer setLenientWithBoolean:true];
  jboolean oldHtmlSafe = [writer isHtmlSafe];
  [writer setHtmlSafeWithBoolean:htmlSafe_];
  jboolean oldSerializeNulls = [writer getSerializeNulls];
  [writer setSerializeNullsWithBoolean:serializeNulls_];
  @try {
    GSONStreams_writeWithGSONJsonElement_withGSONJsonWriter_(jsonElement, writer);
  }
  @catch (JavaIoIOException *e) {
    @throw new_GSONJsonIOException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaLangAssertionError *e) {
    JavaLangAssertionError *error = new_JavaLangAssertionError_initWithId_(JreStrcat("$$$$", @"AssertionError (GSON ", GSONGsonBuildConfig_VERSION, @"): ", [e getMessage]));
    (void) [error initCauseWithJavaLangThrowable:e];
    @throw error;
  }
  @finally {
    [writer setLenientWithBoolean:oldLenient];
    [writer setHtmlSafeWithBoolean:oldHtmlSafe];
    [writer setSerializeNullsWithBoolean:oldSerializeNulls];
  }
}

- (id)fromJsonWithNSString:(NSString *)json
              withIOSClass:(IOSClass *)classOfT {
  id object = [self fromJsonWithNSString:json withJavaLangReflectType:classOfT];
  return [((IOSClass *) nil_chk(GSONPrimitives_wrapWithIOSClass_(classOfT))) cast:object];
}

- (id)fromJsonWithNSString:(NSString *)json
   withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT {
  if (json == nil) {
    return nil;
  }
  JavaIoStringReader *reader = new_JavaIoStringReader_initWithNSString_(json);
  id target = [self fromJsonWithJavaIoReader:reader withJavaLangReflectType:typeOfT];
  return target;
}

- (id)fromJsonWithJavaIoReader:(JavaIoReader *)json
                  withIOSClass:(IOSClass *)classOfT {
  GSONJsonReader *jsonReader = [self newJsonReaderWithJavaIoReader:json];
  id object = [self fromJsonWithGSONJsonReader:jsonReader withJavaLangReflectType:classOfT];
  GSONGson_assertFullConsumptionWithId_withGSONJsonReader_(object, jsonReader);
  return [((IOSClass *) nil_chk(GSONPrimitives_wrapWithIOSClass_(classOfT))) cast:object];
}

- (id)fromJsonWithJavaIoReader:(JavaIoReader *)json
       withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT {
  GSONJsonReader *jsonReader = [self newJsonReaderWithJavaIoReader:json];
  id object = [self fromJsonWithGSONJsonReader:jsonReader withJavaLangReflectType:typeOfT];
  GSONGson_assertFullConsumptionWithId_withGSONJsonReader_(object, jsonReader);
  return object;
}

+ (void)assertFullConsumptionWithId:(id)obj
                 withGSONJsonReader:(GSONJsonReader *)reader {
  GSONGson_assertFullConsumptionWithId_withGSONJsonReader_(obj, reader);
}

- (id)fromJsonWithGSONJsonReader:(GSONJsonReader *)reader
         withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT {
  jboolean isEmpty = true;
  jboolean oldLenient = [((GSONJsonReader *) nil_chk(reader)) isLenient];
  [reader setLenientWithBoolean:true];
  @try {
    (void) [reader peek];
    isEmpty = false;
    GSONTypeToken *typeToken = GSONTypeToken_getWithJavaLangReflectType_(typeOfT);
    GSONTypeAdapter *typeAdapter = [self getAdapterWithGSONTypeToken:typeToken];
    id object = [((GSONTypeAdapter *) nil_chk(typeAdapter)) readWithGSONJsonReader:reader];
    return object;
  }
  @catch (JavaIoEOFException *e) {
    if (isEmpty) {
      return nil;
    }
    @throw new_GSONJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaLangIllegalStateException *e) {
    @throw new_GSONJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaIoIOException *e) {
    @throw new_GSONJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaLangAssertionError *e) {
    JavaLangAssertionError *error = new_JavaLangAssertionError_initWithId_(JreStrcat("$$$$", @"AssertionError (GSON ", GSONGsonBuildConfig_VERSION, @"): ", [e getMessage]));
    (void) [error initCauseWithJavaLangThrowable:e];
    @throw error;
  }
  @finally {
    [reader setLenientWithBoolean:oldLenient];
  }
}

- (id)fromJsonWithGSONJsonElement:(GSONJsonElement *)json
                     withIOSClass:(IOSClass *)classOfT {
  id object = [self fromJsonWithGSONJsonElement:json withJavaLangReflectType:classOfT];
  return [((IOSClass *) nil_chk(GSONPrimitives_wrapWithIOSClass_(classOfT))) cast:object];
}

- (id)fromJsonWithGSONJsonElement:(GSONJsonElement *)json
          withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT {
  if (json == nil) {
    return nil;
  }
  return [self fromJsonWithGSONJsonReader:new_GSONJsonTreeReader_initWithGSONJsonElement_(json) withJavaLangReflectType:typeOfT];
}

- (NSString *)description {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_(@"{serializeNulls:") appendWithBoolean:serializeNulls_])) appendWithNSString:@",factories:"])) appendWithId:factories_])) appendWithNSString:@",instanceCreators:"])) appendWithId:constructorConstructor_])) appendWithNSString:@"}"])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LGSONGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONExcluder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONFieldNamingStrategy;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGSONTypeAdapter;", 0x2, 2, 3, -1, 4, -1, -1 },
    { NULL, "LGSONTypeAdapter;", 0x2, 5, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "LGSONTypeAdapter;", 0xa, 8, 9, -1, 10, -1, -1 },
    { NULL, "LGSONTypeAdapter;", 0xa, 11, 12, -1, 13, -1, -1 },
    { NULL, "LGSONTypeAdapter;", 0xa, 14, 12, -1, 15, -1, -1 },
    { NULL, "LGSONTypeAdapter;", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "LGSONTypeAdapter;", 0x1, 19, 20, -1, 21, -1, -1 },
    { NULL, "LGSONTypeAdapter;", 0x1, 16, 22, -1, 23, -1, -1 },
    { NULL, "LGSONJsonElement;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LGSONJsonElement;", 0x1, 24, 26, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 27, 25, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 27, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, 29, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 30, 29, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 31, 29, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 27, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 33, 29, -1, -1, -1 },
    { NULL, "LGSONJsonWriter;", 0x1, 34, 35, 36, -1, -1, -1 },
    { NULL, "LGSONJsonReader;", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 39, 29, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 41, 42, 43, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 44, 42, 45, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 46, 47, 48, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 49, 50, 51, -1, -1 },
    { NULL, "V", 0xa, 52, 53, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 54, 50, 55, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 56, 42, 57, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 58, 42, 59, -1, -1 },
    { NULL, "LNSString;", 0x1, 60, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithGSONExcluder:withGSONFieldNamingStrategy:withJavaUtilMap:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withGSONLongSerializationPolicy:withNSString:withInt:withInt:withJavaUtilList:withJavaUtilList:withJavaUtilList:);
  methods[2].selector = @selector(newBuilder);
  methods[3].selector = @selector(excluder);
  methods[4].selector = @selector(fieldNamingStrategy);
  methods[5].selector = @selector(serializeNulls);
  methods[6].selector = @selector(htmlSafe);
  methods[7].selector = @selector(doubleAdapterWithBoolean:);
  methods[8].selector = @selector(floatAdapterWithBoolean:);
  methods[9].selector = @selector(checkValidFloatingPointWithDouble:);
  methods[10].selector = @selector(longAdapterWithGSONLongSerializationPolicy:);
  methods[11].selector = @selector(atomicLongAdapterWithGSONTypeAdapter:);
  methods[12].selector = @selector(atomicLongArrayAdapterWithGSONTypeAdapter:);
  methods[13].selector = @selector(getAdapterWithGSONTypeToken:);
  methods[14].selector = @selector(getDelegateAdapterWithGSONTypeAdapterFactory:withGSONTypeToken:);
  methods[15].selector = @selector(getAdapterWithIOSClass:);
  methods[16].selector = @selector(toJsonTreeWithId:);
  methods[17].selector = @selector(toJsonTreeWithId:withJavaLangReflectType:);
  methods[18].selector = @selector(toJsonWithId:);
  methods[19].selector = @selector(toJsonWithId:withJavaLangReflectType:);
  methods[20].selector = @selector(toJsonWithId:withJavaLangAppendable:);
  methods[21].selector = @selector(toJsonWithId:withJavaLangReflectType:withJavaLangAppendable:);
  methods[22].selector = @selector(toJsonWithId:withJavaLangReflectType:withGSONJsonWriter:);
  methods[23].selector = @selector(toJsonWithGSONJsonElement:);
  methods[24].selector = @selector(toJsonWithGSONJsonElement:withJavaLangAppendable:);
  methods[25].selector = @selector(newJsonWriterWithJavaIoWriter:);
  methods[26].selector = @selector(newJsonReaderWithJavaIoReader:);
  methods[27].selector = @selector(toJsonWithGSONJsonElement:withGSONJsonWriter:);
  methods[28].selector = @selector(fromJsonWithNSString:withIOSClass:);
  methods[29].selector = @selector(fromJsonWithNSString:withJavaLangReflectType:);
  methods[30].selector = @selector(fromJsonWithJavaIoReader:withIOSClass:);
  methods[31].selector = @selector(fromJsonWithJavaIoReader:withJavaLangReflectType:);
  methods[32].selector = @selector(assertFullConsumptionWithId:withGSONJsonReader:);
  methods[33].selector = @selector(fromJsonWithGSONJsonReader:withJavaLangReflectType:);
  methods[34].selector = @selector(fromJsonWithGSONJsonElement:withIOSClass:);
  methods[35].selector = @selector(fromJsonWithGSONJsonElement:withJavaLangReflectType:);
  methods[36].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_JSON_NON_EXECUTABLE", "Z", .constantValue.asBOOL = GSONGson_DEFAULT_JSON_NON_EXECUTABLE, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_LENIENT", "Z", .constantValue.asBOOL = GSONGson_DEFAULT_LENIENT, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_PRETTY_PRINT", "Z", .constantValue.asBOOL = GSONGson_DEFAULT_PRETTY_PRINT, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_ESCAPE_HTML", "Z", .constantValue.asBOOL = GSONGson_DEFAULT_ESCAPE_HTML, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_SERIALIZE_NULLS", "Z", .constantValue.asBOOL = GSONGson_DEFAULT_SERIALIZE_NULLS, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_COMPLEX_MAP_KEYS", "Z", .constantValue.asBOOL = GSONGson_DEFAULT_COMPLEX_MAP_KEYS, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_SPECIALIZE_FLOAT_VALUES", "Z", .constantValue.asBOOL = GSONGson_DEFAULT_SPECIALIZE_FLOAT_VALUES, 0x18, -1, -1, -1, -1 },
    { "NULL_KEY_SURROGATE", "LGSONTypeToken;", .constantValue.asLong = 0, 0x1a, -1, 61, 62, -1 },
    { "JSON_NON_EXECUTABLE_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 63, -1, -1 },
    { "calls_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x12, -1, -1, 64, -1 },
    { "typeTokenCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 65, -1 },
    { "constructorConstructor_", "LGSONConstructorConstructor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "jsonAdapterFactory_", "LGSONJsonAdapterAnnotationTypeAdapterFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "factories_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 66, -1 },
    { "excluder_", "LGSONExcluder;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fieldNamingStrategy_", "LGSONFieldNamingStrategy;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "instanceCreators_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 67, -1 },
    { "serializeNulls_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "complexMapKeySerialization_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "generateNonExecutableJson_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "htmlSafe_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prettyPrinting_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "lenient_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "serializeSpecialFloatingPointValues_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "datePattern_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "dateStyle_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "timeStyle_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "longSerializationPolicy_", "LGSONLongSerializationPolicy;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "builderFactories_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 66, -1 },
    { "builderHierarchyFactories_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 66, -1 },
  };
  static const void *ptrTable[] = { "LGSONExcluder;LGSONFieldNamingStrategy;LJavaUtilMap;ZZZZZZZLGSONLongSerializationPolicy;LNSString;IILJavaUtilList;LJavaUtilList;LJavaUtilList;", "(Lcom/google/gson/internal/Excluder;Lcom/google/gson/FieldNamingStrategy;Ljava/util/Map<Ljava/lang/reflect/Type;Lcom/google/gson/InstanceCreator<*>;>;ZZZZZZZLcom/google/gson/LongSerializationPolicy;Ljava/lang/String;IILjava/util/List<Lcom/google/gson/TypeAdapterFactory;>;Ljava/util/List<Lcom/google/gson/TypeAdapterFactory;>;Ljava/util/List<Lcom/google/gson/TypeAdapterFactory;>;)V", "doubleAdapter", "Z", "(Z)Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;", "floatAdapter", "checkValidFloatingPoint", "D", "longAdapter", "LGSONLongSerializationPolicy;", "(Lcom/google/gson/LongSerializationPolicy;)Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;", "atomicLongAdapter", "LGSONTypeAdapter;", "(Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;)Lcom/google/gson/TypeAdapter<Ljava/util/concurrent/atomic/AtomicLong;>;", "atomicLongArrayAdapter", "(Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;)Lcom/google/gson/TypeAdapter<Ljava/util/concurrent/atomic/AtomicLongArray;>;", "getAdapter", "LGSONTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "getDelegateAdapter", "LGSONTypeAdapterFactory;LGSONTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "toJsonTree", "LNSObject;", "LNSObject;LJavaLangReflectType;", "toJson", "LNSObject;LJavaLangAppendable;", "LGSONJsonIOException;", "LNSObject;LJavaLangReflectType;LJavaLangAppendable;", "LNSObject;LJavaLangReflectType;LGSONJsonWriter;", "LGSONJsonElement;", "LGSONJsonElement;LJavaLangAppendable;", "newJsonWriter", "LJavaIoWriter;", "LJavaIoIOException;", "newJsonReader", "LJavaIoReader;", "LGSONJsonElement;LGSONJsonWriter;", "fromJson", "LNSString;LIOSClass;", "LGSONJsonSyntaxException;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TT;>;)TT;", "LNSString;LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/reflect/Type;)TT;", "LJavaIoReader;LIOSClass;", "LGSONJsonSyntaxException;LGSONJsonIOException;", "<T:Ljava/lang/Object;>(Ljava/io/Reader;Ljava/lang/Class<TT;>;)TT;", "LJavaIoReader;LJavaLangReflectType;", "LGSONJsonIOException;LGSONJsonSyntaxException;", "<T:Ljava/lang/Object;>(Ljava/io/Reader;Ljava/lang/reflect/Type;)TT;", "assertFullConsumption", "LNSObject;LGSONJsonReader;", "LGSONJsonReader;LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Lcom/google/gson/stream/JsonReader;Ljava/lang/reflect/Type;)TT;", "LGSONJsonElement;LIOSClass;", "<T:Ljava/lang/Object;>(Lcom/google/gson/JsonElement;Ljava/lang/Class<TT;>;)TT;", "LGSONJsonElement;LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;)TT;", "toString", &GSONGson_NULL_KEY_SURROGATE, "Lcom/google/gson/reflect/TypeToken<*>;", &GSONGson_JSON_NON_EXECUTABLE_PREFIX, "Ljava/lang/ThreadLocal<Ljava/util/Map<Lcom/google/gson/reflect/TypeToken<*>;Lcom/google/gson/Gson$FutureTypeAdapter<*>;>;>;", "Ljava/util/Map<Lcom/google/gson/reflect/TypeToken<*>;Lcom/google/gson/TypeAdapter<*>;>;", "Ljava/util/List<Lcom/google/gson/TypeAdapterFactory;>;", "Ljava/util/Map<Ljava/lang/reflect/Type;Lcom/google/gson/InstanceCreator<*>;>;", "LGSONGson_FutureTypeAdapter;" };
  static const J2ObjcClassInfo _GSONGson = { "Gson", "com.google.gson", ptrTable, methods, fields, 7, 0x11, 37, 30, -1, 68, -1, -1, -1 };
  return &_GSONGson;
}

+ (void)initialize {
  if (self == [GSONGson class]) {
    GSONGson_NULL_KEY_SURROGATE = GSONTypeToken_getWithIOSClass_(NSObject_class_());
    J2OBJC_SET_INITIALIZED(GSONGson)
  }
}

@end

void GSONGson_init(GSONGson *self) {
  GSONGson_initWithGSONExcluder_withGSONFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGSONLongSerializationPolicy_withNSString_withInt_withInt_withJavaUtilList_withJavaUtilList_withJavaUtilList_(self, JreLoadStatic(GSONExcluder, DEFAULT), JreLoadEnum(GSONFieldNamingPolicy, IDENTITY), JavaUtilCollections_emptyMap(), GSONGson_DEFAULT_SERIALIZE_NULLS, GSONGson_DEFAULT_COMPLEX_MAP_KEYS, GSONGson_DEFAULT_JSON_NON_EXECUTABLE, GSONGson_DEFAULT_ESCAPE_HTML, GSONGson_DEFAULT_PRETTY_PRINT, GSONGson_DEFAULT_LENIENT, GSONGson_DEFAULT_SPECIALIZE_FLOAT_VALUES, JreLoadEnum(GSONLongSerializationPolicy, DEFAULT), nil, JavaTextDateFormat_DEFAULT, JavaTextDateFormat_DEFAULT, JavaUtilCollections_emptyList(), JavaUtilCollections_emptyList(), JavaUtilCollections_emptyList());
}

GSONGson *new_GSONGson_init() {
  J2OBJC_NEW_IMPL(GSONGson, init)
}

GSONGson *create_GSONGson_init() {
  J2OBJC_CREATE_IMPL(GSONGson, init)
}

void GSONGson_initWithGSONExcluder_withGSONFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGSONLongSerializationPolicy_withNSString_withInt_withInt_withJavaUtilList_withJavaUtilList_withJavaUtilList_(GSONGson *self, GSONExcluder *excluder, id<GSONFieldNamingStrategy> fieldNamingStrategy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean lenient, jboolean serializeSpecialFloatingPointValues, GSONLongSerializationPolicy *longSerializationPolicy, NSString *datePattern, jint dateStyle, jint timeStyle, id<JavaUtilList> builderFactories, id<JavaUtilList> builderHierarchyFactories, id<JavaUtilList> factoriesToBeAdded) {
  NSObject_init(self);
  self->calls_ = new_JavaLangThreadLocal_init();
  self->typeTokenCache_ = new_JavaUtilConcurrentConcurrentHashMap_init();
  self->excluder_ = excluder;
  self->fieldNamingStrategy_ = fieldNamingStrategy;
  self->instanceCreators_ = instanceCreators;
  self->constructorConstructor_ = new_GSONConstructorConstructor_initWithJavaUtilMap_(instanceCreators);
  self->serializeNulls_ = serializeNulls;
  self->complexMapKeySerialization_ = complexMapKeySerialization;
  self->generateNonExecutableJson_ = generateNonExecutableGson;
  self->htmlSafe_ = htmlSafe;
  self->prettyPrinting_ = prettyPrinting;
  self->lenient_ = lenient;
  self->serializeSpecialFloatingPointValues_ = serializeSpecialFloatingPointValues;
  self->longSerializationPolicy_ = longSerializationPolicy;
  self->datePattern_ = datePattern;
  self->dateStyle_ = dateStyle;
  self->timeStyle_ = timeStyle;
  self->builderFactories_ = builderFactories;
  self->builderHierarchyFactories_ = builderHierarchyFactories;
  id<JavaUtilList> factories = new_JavaUtilArrayList_init();
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, JSON_ELEMENT_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONObjectTypeAdapter, FACTORY)];
  [factories addWithId:excluder];
  [factories addAllWithJavaUtilCollection:factoriesToBeAdded];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, STRING_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, INTEGER_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, BOOLEAN_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, BYTE_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, SHORT_FACTORY)];
  GSONTypeAdapter *longAdapter = GSONGson_longAdapterWithGSONLongSerializationPolicy_(longSerializationPolicy);
  [factories addWithId:GSONTypeAdapters_newFactoryWithIOSClass_withIOSClass_withGSONTypeAdapter_([IOSClass longClass], JavaLangLong_class_(), longAdapter)];
  [factories addWithId:GSONTypeAdapters_newFactoryWithIOSClass_withIOSClass_withGSONTypeAdapter_([IOSClass doubleClass], JavaLangDouble_class_(), GSONGson_doubleAdapterWithBoolean_(self, serializeSpecialFloatingPointValues))];
  [factories addWithId:GSONTypeAdapters_newFactoryWithIOSClass_withIOSClass_withGSONTypeAdapter_([IOSClass floatClass], JavaLangFloat_class_(), GSONGson_floatAdapterWithBoolean_(self, serializeSpecialFloatingPointValues))];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, NUMBER_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, ATOMIC_INTEGER_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, ATOMIC_BOOLEAN_FACTORY)];
  [factories addWithId:GSONTypeAdapters_newFactoryWithIOSClass_withGSONTypeAdapter_(JavaUtilConcurrentAtomicAtomicLong_class_(), GSONGson_atomicLongAdapterWithGSONTypeAdapter_(longAdapter))];
  [factories addWithId:GSONTypeAdapters_newFactoryWithIOSClass_withGSONTypeAdapter_(JavaUtilConcurrentAtomicAtomicLongArray_class_(), GSONGson_atomicLongArrayAdapterWithGSONTypeAdapter_(longAdapter))];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, ATOMIC_INTEGER_ARRAY_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, CHARACTER_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, STRING_BUILDER_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, STRING_BUFFER_FACTORY)];
  [factories addWithId:GSONTypeAdapters_newFactoryWithIOSClass_withGSONTypeAdapter_(JavaMathBigDecimal_class_(), JreLoadStatic(GSONTypeAdapters, BIG_DECIMAL))];
  [factories addWithId:GSONTypeAdapters_newFactoryWithIOSClass_withGSONTypeAdapter_(JavaMathBigInteger_class_(), JreLoadStatic(GSONTypeAdapters, BIG_INTEGER))];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, URL_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, URI_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, UUID_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, CURRENCY_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, LOCALE_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, INET_ADDRESS_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, BIT_SET_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONDateTypeAdapter, FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, CALENDAR_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTimeTypeAdapter, FACTORY)];
  [factories addWithId:JreLoadStatic(GSONSqlDateTypeAdapter, FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, TIMESTAMP_FACTORY)];
  [factories addWithId:JreLoadStatic(GSONArrayTypeAdapter, FACTORY)];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, CLASS_FACTORY)];
  [factories addWithId:new_GSONCollectionTypeAdapterFactory_initWithGSONConstructorConstructor_(self->constructorConstructor_)];
  [factories addWithId:new_GSONMapTypeAdapterFactory_initWithGSONConstructorConstructor_withBoolean_(self->constructorConstructor_, complexMapKeySerialization)];
  self->jsonAdapterFactory_ = new_GSONJsonAdapterAnnotationTypeAdapterFactory_initWithGSONConstructorConstructor_(self->constructorConstructor_);
  [factories addWithId:self->jsonAdapterFactory_];
  [factories addWithId:JreLoadStatic(GSONTypeAdapters, ENUM_FACTORY)];
  [factories addWithId:new_GSONReflectiveTypeAdapterFactory_initWithGSONConstructorConstructor_withGSONFieldNamingStrategy_withGSONExcluder_withGSONJsonAdapterAnnotationTypeAdapterFactory_(self->constructorConstructor_, fieldNamingStrategy, excluder, self->jsonAdapterFactory_)];
  self->factories_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(factories);
}

GSONGson *new_GSONGson_initWithGSONExcluder_withGSONFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGSONLongSerializationPolicy_withNSString_withInt_withInt_withJavaUtilList_withJavaUtilList_withJavaUtilList_(GSONExcluder *excluder, id<GSONFieldNamingStrategy> fieldNamingStrategy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean lenient, jboolean serializeSpecialFloatingPointValues, GSONLongSerializationPolicy *longSerializationPolicy, NSString *datePattern, jint dateStyle, jint timeStyle, id<JavaUtilList> builderFactories, id<JavaUtilList> builderHierarchyFactories, id<JavaUtilList> factoriesToBeAdded) {
  J2OBJC_NEW_IMPL(GSONGson, initWithGSONExcluder_withGSONFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGSONLongSerializationPolicy_withNSString_withInt_withInt_withJavaUtilList_withJavaUtilList_withJavaUtilList_, excluder, fieldNamingStrategy, instanceCreators, serializeNulls, complexMapKeySerialization, generateNonExecutableGson, htmlSafe, prettyPrinting, lenient, serializeSpecialFloatingPointValues, longSerializationPolicy, datePattern, dateStyle, timeStyle, builderFactories, builderHierarchyFactories, factoriesToBeAdded)
}

GSONGson *create_GSONGson_initWithGSONExcluder_withGSONFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGSONLongSerializationPolicy_withNSString_withInt_withInt_withJavaUtilList_withJavaUtilList_withJavaUtilList_(GSONExcluder *excluder, id<GSONFieldNamingStrategy> fieldNamingStrategy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean lenient, jboolean serializeSpecialFloatingPointValues, GSONLongSerializationPolicy *longSerializationPolicy, NSString *datePattern, jint dateStyle, jint timeStyle, id<JavaUtilList> builderFactories, id<JavaUtilList> builderHierarchyFactories, id<JavaUtilList> factoriesToBeAdded) {
  J2OBJC_CREATE_IMPL(GSONGson, initWithGSONExcluder_withGSONFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGSONLongSerializationPolicy_withNSString_withInt_withInt_withJavaUtilList_withJavaUtilList_withJavaUtilList_, excluder, fieldNamingStrategy, instanceCreators, serializeNulls, complexMapKeySerialization, generateNonExecutableGson, htmlSafe, prettyPrinting, lenient, serializeSpecialFloatingPointValues, longSerializationPolicy, datePattern, dateStyle, timeStyle, builderFactories, builderHierarchyFactories, factoriesToBeAdded)
}

GSONTypeAdapter *GSONGson_doubleAdapterWithBoolean_(GSONGson *self, jboolean serializeSpecialFloatingPointValues) {
  if (serializeSpecialFloatingPointValues) {
    return JreLoadStatic(GSONTypeAdapters, DOUBLE);
  }
  return new_GSONGson_1_init();
}

GSONTypeAdapter *GSONGson_floatAdapterWithBoolean_(GSONGson *self, jboolean serializeSpecialFloatingPointValues) {
  if (serializeSpecialFloatingPointValues) {
    return JreLoadStatic(GSONTypeAdapters, FLOAT);
  }
  return new_GSONGson_2_init();
}

void GSONGson_checkValidFloatingPointWithDouble_(jdouble value) {
  GSONGson_initialize();
  if (JavaLangDouble_isNaNWithDouble_(value) || JavaLangDouble_isInfiniteWithDouble_(value)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("D$", value, @" is not a valid double value as per JSON specification. To override this behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method."));
  }
}

GSONTypeAdapter *GSONGson_longAdapterWithGSONLongSerializationPolicy_(GSONLongSerializationPolicy *longSerializationPolicy) {
  GSONGson_initialize();
  if (longSerializationPolicy == JreLoadEnum(GSONLongSerializationPolicy, DEFAULT)) {
    return JreLoadStatic(GSONTypeAdapters, LONG);
  }
  return new_GSONGson_3_init();
}

GSONTypeAdapter *GSONGson_atomicLongAdapterWithGSONTypeAdapter_(GSONTypeAdapter *longAdapter) {
  GSONGson_initialize();
  return [new_GSONGson_4_initWithGSONTypeAdapter_(longAdapter) nullSafe];
}

GSONTypeAdapter *GSONGson_atomicLongArrayAdapterWithGSONTypeAdapter_(GSONTypeAdapter *longAdapter) {
  GSONGson_initialize();
  return [new_GSONGson_5_initWithGSONTypeAdapter_(longAdapter) nullSafe];
}

void GSONGson_assertFullConsumptionWithId_withGSONJsonReader_(id obj, GSONJsonReader *reader) {
  GSONGson_initialize();
  @try {
    if (obj != nil && [((GSONJsonReader *) nil_chk(reader)) peek] != JreLoadEnum(GSONJsonToken, END_DOCUMENT)) {
      @throw new_GSONJsonIOException_initWithNSString_(@"JSON document was not fully consumed.");
    }
  }
  @catch (GSONMalformedJsonException *e) {
    @throw new_GSONJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaIoIOException *e) {
    @throw new_GSONJsonIOException_initWithJavaLangThrowable_(e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GSONGson)

@implementation GSONGson_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONGson_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangDouble *)readWithGSONJsonReader:(GSONJsonReader *)inArg {
  if ([((GSONJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GSONJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  return JavaLangDouble_valueOfWithDouble_([inArg nextDouble]);
}

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(NSNumber *)value {
  if (value == nil) {
    (void) [((GSONJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  jdouble doubleValue = [value doubleValue];
  GSONGson_checkValidFloatingPointWithDouble_(doubleValue);
  (void) [((GSONJsonWriter *) nil_chk(outArg)) valueWithNSNumber:value];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readWithGSONJsonReader:);
  methods[2].selector = @selector(writeWithGSONJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "read", "LGSONJsonReader;", "LJavaIoIOException;", "write", "LGSONJsonWriter;LNSNumber;", "LGSONGson;", "doubleAdapterWithBoolean:", "Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _GSONGson_1 = { "", "com.google.gson", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 5, -1, 6, 7, -1 };
  return &_GSONGson_1;
}

@end

void GSONGson_1_init(GSONGson_1 *self) {
  GSONTypeAdapter_init(self);
}

GSONGson_1 *new_GSONGson_1_init() {
  J2OBJC_NEW_IMPL(GSONGson_1, init)
}

GSONGson_1 *create_GSONGson_1_init() {
  J2OBJC_CREATE_IMPL(GSONGson_1, init)
}

@implementation GSONGson_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONGson_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangFloat *)readWithGSONJsonReader:(GSONJsonReader *)inArg {
  if ([((GSONJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GSONJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  return JavaLangFloat_valueOfWithFloat_((jfloat) [inArg nextDouble]);
}

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(NSNumber *)value {
  if (value == nil) {
    (void) [((GSONJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  jfloat floatValue = [value floatValue];
  GSONGson_checkValidFloatingPointWithDouble_(floatValue);
  (void) [((GSONJsonWriter *) nil_chk(outArg)) valueWithNSNumber:value];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readWithGSONJsonReader:);
  methods[2].selector = @selector(writeWithGSONJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "read", "LGSONJsonReader;", "LJavaIoIOException;", "write", "LGSONJsonWriter;LNSNumber;", "LGSONGson;", "floatAdapterWithBoolean:", "Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _GSONGson_2 = { "", "com.google.gson", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 5, -1, 6, 7, -1 };
  return &_GSONGson_2;
}

@end

void GSONGson_2_init(GSONGson_2 *self) {
  GSONTypeAdapter_init(self);
}

GSONGson_2 *new_GSONGson_2_init() {
  J2OBJC_NEW_IMPL(GSONGson_2, init)
}

GSONGson_2 *create_GSONGson_2_init() {
  J2OBJC_CREATE_IMPL(GSONGson_2, init)
}

@implementation GSONGson_3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONGson_3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSNumber *)readWithGSONJsonReader:(GSONJsonReader *)inArg {
  if ([((GSONJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GSONJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  return JavaLangLong_valueOfWithLong_([inArg nextLong]);
}

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(NSNumber *)value {
  if (value == nil) {
    (void) [((GSONJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  (void) [((GSONJsonWriter *) nil_chk(outArg)) valueWithNSString:[value description]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readWithGSONJsonReader:);
  methods[2].selector = @selector(writeWithGSONJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "read", "LGSONJsonReader;", "LJavaIoIOException;", "write", "LGSONJsonWriter;LNSNumber;", "LGSONGson;", "longAdapterWithGSONLongSerializationPolicy:", "Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _GSONGson_3 = { "", "com.google.gson", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 5, -1, 6, 7, -1 };
  return &_GSONGson_3;
}

@end

void GSONGson_3_init(GSONGson_3 *self) {
  GSONTypeAdapter_init(self);
}

GSONGson_3 *new_GSONGson_3_init() {
  J2OBJC_NEW_IMPL(GSONGson_3, init)
}

GSONGson_3 *create_GSONGson_3_init() {
  J2OBJC_CREATE_IMPL(GSONGson_3, init)
}

@implementation GSONGson_4

- (instancetype)initWithGSONTypeAdapter:(GSONTypeAdapter *)capture$0 {
  GSONGson_4_initWithGSONTypeAdapter_(self, capture$0);
  return self;
}

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(JavaUtilConcurrentAtomicAtomicLong *)value {
  [((GSONTypeAdapter *) nil_chk(val$longAdapter_)) writeWithGSONJsonWriter:outArg withId:JavaLangLong_valueOfWithLong_([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(value)) get])];
}

- (JavaUtilConcurrentAtomicAtomicLong *)readWithGSONJsonReader:(GSONJsonReader *)inArg {
  NSNumber *value = [((GSONTypeAdapter *) nil_chk(val$longAdapter_)) readWithGSONJsonReader:inArg];
  return new_JavaUtilConcurrentAtomicAtomicLong_initWithLong_([((NSNumber *) nil_chk(value)) longLongValue]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentAtomicAtomicLong;", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithGSONTypeAdapter:);
  methods[1].selector = @selector(writeWithGSONJsonWriter:withId:);
  methods[2].selector = @selector(readWithGSONJsonReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$longAdapter_", "LGSONTypeAdapter;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "write", "LGSONJsonWriter;LJavaUtilConcurrentAtomicAtomicLong;", "LJavaIoIOException;", "read", "LGSONJsonReader;", "Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;", "LGSONGson;", "atomicLongAdapterWithGSONTypeAdapter:", "Lcom/google/gson/TypeAdapter<Ljava/util/concurrent/atomic/AtomicLong;>;" };
  static const J2ObjcClassInfo _GSONGson_4 = { "", "com.google.gson", ptrTable, methods, fields, 7, 0x8018, 3, 1, 6, -1, 7, 8, -1 };
  return &_GSONGson_4;
}

@end

void GSONGson_4_initWithGSONTypeAdapter_(GSONGson_4 *self, GSONTypeAdapter *capture$0) {
  self->val$longAdapter_ = capture$0;
  GSONTypeAdapter_init(self);
}

GSONGson_4 *new_GSONGson_4_initWithGSONTypeAdapter_(GSONTypeAdapter *capture$0) {
  J2OBJC_NEW_IMPL(GSONGson_4, initWithGSONTypeAdapter_, capture$0)
}

GSONGson_4 *create_GSONGson_4_initWithGSONTypeAdapter_(GSONTypeAdapter *capture$0) {
  J2OBJC_CREATE_IMPL(GSONGson_4, initWithGSONTypeAdapter_, capture$0)
}

@implementation GSONGson_5

- (instancetype)initWithGSONTypeAdapter:(GSONTypeAdapter *)capture$0 {
  GSONGson_5_initWithGSONTypeAdapter_(self, capture$0);
  return self;
}

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(JavaUtilConcurrentAtomicAtomicLongArray *)value {
  (void) [((GSONJsonWriter *) nil_chk(outArg)) beginArray];
  for (jint i = 0, length = [((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(value)) length]; i < length; i++) {
    [((GSONTypeAdapter *) nil_chk(val$longAdapter_)) writeWithGSONJsonWriter:outArg withId:JavaLangLong_valueOfWithLong_([value getWithInt:i])];
  }
  (void) [outArg endArray];
}

- (JavaUtilConcurrentAtomicAtomicLongArray *)readWithGSONJsonReader:(GSONJsonReader *)inArg {
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  [((GSONJsonReader *) nil_chk(inArg)) beginArray];
  while ([inArg hasNext]) {
    jlong value = [((NSNumber *) nil_chk([((GSONTypeAdapter *) nil_chk(val$longAdapter_)) readWithGSONJsonReader:inArg])) longLongValue];
    [list addWithId:JavaLangLong_valueOfWithLong_(value)];
  }
  [inArg endArray];
  jint length = [list size];
  JavaUtilConcurrentAtomicAtomicLongArray *array = new_JavaUtilConcurrentAtomicAtomicLongArray_initWithInt_(length);
  for (jint i = 0; i < length; ++i) {
    [array setWithInt:i withLong:[((JavaLangLong *) nil_chk([list getWithInt:i])) longLongValue]];
  }
  return array;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentAtomicAtomicLongArray;", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithGSONTypeAdapter:);
  methods[1].selector = @selector(writeWithGSONJsonWriter:withId:);
  methods[2].selector = @selector(readWithGSONJsonReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$longAdapter_", "LGSONTypeAdapter;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "write", "LGSONJsonWriter;LJavaUtilConcurrentAtomicAtomicLongArray;", "LJavaIoIOException;", "read", "LGSONJsonReader;", "Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;", "LGSONGson;", "atomicLongArrayAdapterWithGSONTypeAdapter:", "Lcom/google/gson/TypeAdapter<Ljava/util/concurrent/atomic/AtomicLongArray;>;" };
  static const J2ObjcClassInfo _GSONGson_5 = { "", "com.google.gson", ptrTable, methods, fields, 7, 0x8018, 3, 1, 6, -1, 7, 8, -1 };
  return &_GSONGson_5;
}

@end

void GSONGson_5_initWithGSONTypeAdapter_(GSONGson_5 *self, GSONTypeAdapter *capture$0) {
  self->val$longAdapter_ = capture$0;
  GSONTypeAdapter_init(self);
}

GSONGson_5 *new_GSONGson_5_initWithGSONTypeAdapter_(GSONTypeAdapter *capture$0) {
  J2OBJC_NEW_IMPL(GSONGson_5, initWithGSONTypeAdapter_, capture$0)
}

GSONGson_5 *create_GSONGson_5_initWithGSONTypeAdapter_(GSONTypeAdapter *capture$0) {
  J2OBJC_CREATE_IMPL(GSONGson_5, initWithGSONTypeAdapter_, capture$0)
}

@implementation GSONGson_FutureTypeAdapter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONGson_FutureTypeAdapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setDelegateWithGSONTypeAdapter:(GSONTypeAdapter *)typeAdapter {
  if (delegate_ != nil) {
    @throw new_JavaLangAssertionError_init();
  }
  delegate_ = typeAdapter;
}

- (id)readWithGSONJsonReader:(GSONJsonReader *)inArg {
  if (delegate_ == nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  return [delegate_ readWithGSONJsonReader:inArg];
}

- (void)writeWithGSONJsonWriter:(GSONJsonWriter *)outArg
                         withId:(id)value {
  if (delegate_ == nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  [delegate_ writeWithGSONJsonWriter:outArg withId:value];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, 5, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 5, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setDelegateWithGSONTypeAdapter:);
  methods[2].selector = @selector(readWithGSONJsonReader:);
  methods[3].selector = @selector(writeWithGSONJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LGSONTypeAdapter;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "setDelegate", "LGSONTypeAdapter;", "(Lcom/google/gson/TypeAdapter<TT;>;)V", "read", "LGSONJsonReader;", "LJavaIoIOException;", "(Lcom/google/gson/stream/JsonReader;)TT;", "write", "LGSONJsonWriter;LNSObject;", "(Lcom/google/gson/stream/JsonWriter;TT;)V", "Lcom/google/gson/TypeAdapter<TT;>;", "LGSONGson;", "<T:Ljava/lang/Object;>Lcom/google/gson/TypeAdapter<TT;>;" };
  static const J2ObjcClassInfo _GSONGson_FutureTypeAdapter = { "FutureTypeAdapter", "com.google.gson", ptrTable, methods, fields, 7, 0x8, 4, 1, 11, -1, -1, 12, -1 };
  return &_GSONGson_FutureTypeAdapter;
}

@end

void GSONGson_FutureTypeAdapter_init(GSONGson_FutureTypeAdapter *self) {
  GSONTypeAdapter_init(self);
}

GSONGson_FutureTypeAdapter *new_GSONGson_FutureTypeAdapter_init() {
  J2OBJC_NEW_IMPL(GSONGson_FutureTypeAdapter, init)
}

GSONGson_FutureTypeAdapter *create_GSONGson_FutureTypeAdapter_init() {
  J2OBJC_CREATE_IMPL(GSONGson_FutureTypeAdapter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GSONGson_FutureTypeAdapter)
