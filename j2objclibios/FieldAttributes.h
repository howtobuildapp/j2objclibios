//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/FieldAttributes.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_FieldAttributes")
#ifdef RESTRICT_FieldAttributes
#define INCLUDE_ALL_FieldAttributes 0
#else
#define INCLUDE_ALL_FieldAttributes 1
#endif
#undef RESTRICT_FieldAttributes

#if !defined (GSONFieldAttributes_) && (INCLUDE_ALL_FieldAttributes || defined(INCLUDE_GSONFieldAttributes))
#define GSONFieldAttributes_

@class IOSClass;
@class JavaLangReflectField;
@protocol JavaLangAnnotationAnnotation;
@protocol JavaLangReflectType;
@protocol JavaUtilCollection;

/*!
 @brief A data object that stores attributes of a field.
 <p>This class is immutable; therefore, it can be safely shared across threads.
 @author Inderjeet Singh
 @author Joel Leitch
 @since 1.4
 */
@interface GSONFieldAttributes : NSObject

#pragma mark Public

/*!
 @brief Constructs a Field Attributes object from the <code>f</code>.
 @param f the field to pull attributes from
 */
- (instancetype)initWithJavaLangReflectField:(JavaLangReflectField *)f;

/*!
 @brief Return the <code>T</code> annotation object from this field if it exist; otherwise returns 
 <code>null</code>.
 @param annotation the class of the annotation that will be retrieved
 @return the annotation instance if it is bound to the field; otherwise <code>null</code>
 */
- (id<JavaLangAnnotationAnnotation>)getAnnotationWithIOSClass:(IOSClass *)annotation;

/*!
 @brief Return the annotations that are present on this field.
 @return an array of all the annotations set on the field
 @since 1.4
 */
- (id<JavaUtilCollection>)getAnnotations;

/*!
 @brief Returns the <code>Class</code> object that was declared for this field.
 <p>For example, assume the following class definition: 
 <pre class="code">
  public class Foo {
    private String bar;
    private List&lt;String&gt; red;
  } 
 
@endcode
  
 <p>This method would return <code>String.class</code> for the <code>bar</code> field and 
 <code>List.class</code> for the <code>red</code> field.
 @return the specific class object that was declared for the field
 */
- (IOSClass *)getDeclaredClass;

/*!
 @brief <p>For example, assume the following class definition: 
 <pre class="code">
  public class Foo {
    private String bar;
    private List&lt;String&gt; red;
  }
  Type listParameterizedType = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType(); 
 
@endcode
  
 <p>This method would return <code>String.class</code> for the <code>bar</code> field and 
 <code>listParameterizedType</code> for the <code>red</code> field.
 @return the specific type declared for this field
 */
- (id<JavaLangReflectType>)getDeclaredType;

/*!
 @return the declaring class that contains this field
 */
- (IOSClass *)getDeclaringClass;

/*!
 @return the name of the field
 */
- (NSString *)getName;

/*!
 @brief Returns <code>true</code> if the field is defined with the <code>modifier</code>.
 <p>This method is meant to be called as: 
 <pre class="code">
  boolean hasPublicModifier = fieldAttribute.hasModifier(java.lang.reflect.Modifier.PUBLIC); 
 
@endcode
 - seealso: java.lang.reflect.Modifier
 */
- (jboolean)hasModifierWithInt:(jint)modifier;

#pragma mark Package-Private

/*!
 @brief Returns the value of the field represented by this <code>Field</code>, on
  the specified object.The value is automatically wrapped in an
  object if it has a primitive type.
 @return the value of the represented field in object 
 <code>obj</code>; primitive values are wrapped in an appropriate
  object before being returned
 @throw IllegalAccessException
 @throw IllegalArgumentException
 */
- (id)getWithId:(id)instance;

/*!
 @brief This is exposed internally only for the removing synthetic fields from the JSON output.
 @return true if the field is synthetic; otherwise false
 */
- (jboolean)isSynthetic;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONFieldAttributes)

FOUNDATION_EXPORT void GSONFieldAttributes_initWithJavaLangReflectField_(GSONFieldAttributes *self, JavaLangReflectField *f);

FOUNDATION_EXPORT GSONFieldAttributes *new_GSONFieldAttributes_initWithJavaLangReflectField_(JavaLangReflectField *f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GSONFieldAttributes *create_GSONFieldAttributes_initWithJavaLangReflectField_(JavaLangReflectField *f);

J2OBJC_TYPE_LITERAL_HEADER(GSONFieldAttributes)

@compatibility_alias ComGoogleGsonFieldAttributes GSONFieldAttributes;

#endif

#pragma pop_macro("INCLUDE_ALL_FieldAttributes")
