//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/github/howtobuildapp/libservice/execute/Callback.java
//

#include "Callback.h"
#include "J2ObjC_source.h"
#include "Request.h"
#include "Response.h"

@implementation HTBACallback

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  HTBACallback_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onCompleteWithHTBARequest:(HTBARequest *)req
                 withHTBAResponse:(HTBAResponse *)resp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onCompleteWithHTBARequest:withHTBAResponse:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onComplete", "LHTBARequest;LHTBAResponse;" };
  static const J2ObjcClassInfo _HTBACallback = { "Callback", "com.github.howtobuildapp.libservice.execute", ptrTable, methods, NULL, 7, 0x401, 2, 0, -1, -1, -1, -1, -1 };
  return &_HTBACallback;
}

@end

void HTBACallback_init(HTBACallback *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HTBACallback)
