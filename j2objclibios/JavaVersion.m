//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/internal/JavaVersion.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "JavaVersion.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"

@interface GSONJavaVersion ()

+ (jint)determineMajorJavaVersion;

+ (jint)parseDottedWithNSString:(NSString *)javaVersion;

+ (jint)extractBeginningIntWithNSString:(NSString *)javaVersion;

- (instancetype)init;

@end

inline jint GSONJavaVersion_get_majorJavaVersion();
static jint GSONJavaVersion_majorJavaVersion;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(GSONJavaVersion, majorJavaVersion, jint)

__attribute__((unused)) static jint GSONJavaVersion_determineMajorJavaVersion();

__attribute__((unused)) static jint GSONJavaVersion_parseDottedWithNSString_(NSString *javaVersion);

__attribute__((unused)) static jint GSONJavaVersion_extractBeginningIntWithNSString_(NSString *javaVersion);

__attribute__((unused)) static void GSONJavaVersion_init(GSONJavaVersion *self);

__attribute__((unused)) static GSONJavaVersion *new_GSONJavaVersion_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static GSONJavaVersion *create_GSONJavaVersion_init();

J2OBJC_INITIALIZED_DEFN(GSONJavaVersion)

@implementation GSONJavaVersion

+ (jint)determineMajorJavaVersion {
  return GSONJavaVersion_determineMajorJavaVersion();
}

+ (jint)getMajorJavaVersionWithNSString:(NSString *)javaVersion {
  return GSONJavaVersion_getMajorJavaVersionWithNSString_(javaVersion);
}

+ (jint)parseDottedWithNSString:(NSString *)javaVersion {
  return GSONJavaVersion_parseDottedWithNSString_(javaVersion);
}

+ (jint)extractBeginningIntWithNSString:(NSString *)javaVersion {
  return GSONJavaVersion_extractBeginningIntWithNSString_(javaVersion);
}

+ (jint)getMajorJavaVersion {
  return GSONJavaVersion_getMajorJavaVersion();
}

+ (jboolean)isJava9OrLater {
  return GSONJavaVersion_isJava9OrLater();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONJavaVersion_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 3, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(determineMajorJavaVersion);
  methods[1].selector = @selector(getMajorJavaVersionWithNSString:);
  methods[2].selector = @selector(parseDottedWithNSString:);
  methods[3].selector = @selector(extractBeginningIntWithNSString:);
  methods[4].selector = @selector(getMajorJavaVersion);
  methods[5].selector = @selector(isJava9OrLater);
  methods[6].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "majorJavaVersion", "I", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "getMajorJavaVersion", "LNSString;", "parseDotted", "extractBeginningInt", &GSONJavaVersion_majorJavaVersion };
  static const J2ObjcClassInfo _GSONJavaVersion = { "JavaVersion", "com.google.gson.internal", ptrTable, methods, fields, 7, 0x11, 7, 1, -1, -1, -1, -1, -1 };
  return &_GSONJavaVersion;
}

+ (void)initialize {
  if (self == [GSONJavaVersion class]) {
    GSONJavaVersion_majorJavaVersion = GSONJavaVersion_determineMajorJavaVersion();
    J2OBJC_SET_INITIALIZED(GSONJavaVersion)
  }
}

@end

jint GSONJavaVersion_determineMajorJavaVersion() {
  GSONJavaVersion_initialize();
  NSString *javaVersion = JavaLangSystem_getPropertyWithNSString_(@"java.version");
  return GSONJavaVersion_getMajorJavaVersionWithNSString_(javaVersion);
}

jint GSONJavaVersion_getMajorJavaVersionWithNSString_(NSString *javaVersion) {
  GSONJavaVersion_initialize();
  jint version_ = GSONJavaVersion_parseDottedWithNSString_(javaVersion);
  if (version_ == -1) {
    version_ = GSONJavaVersion_extractBeginningIntWithNSString_(javaVersion);
  }
  if (version_ == -1) {
    return 6;
  }
  return version_;
}

jint GSONJavaVersion_parseDottedWithNSString_(NSString *javaVersion) {
  GSONJavaVersion_initialize();
  @try {
    IOSObjectArray *parts = [((NSString *) nil_chk(javaVersion)) java_split:@"[._]"];
    jint firstVer = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(parts), 0));
    if (firstVer == 1 && parts->size_ > 1) {
      return JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(parts, 1));
    }
    else {
      return firstVer;
    }
  }
  @catch (JavaLangNumberFormatException *e) {
    return -1;
  }
}

jint GSONJavaVersion_extractBeginningIntWithNSString_(NSString *javaVersion) {
  GSONJavaVersion_initialize();
  @try {
    JavaLangStringBuilder *num = new_JavaLangStringBuilder_init();
    for (jint i = 0; i < [((NSString *) nil_chk(javaVersion)) java_length]; ++i) {
      jchar c = [javaVersion charAtWithInt:i];
      if (JavaLangCharacter_isDigitWithChar_(c)) {
        (void) [num appendWithChar:c];
      }
      else {
        break;
      }
    }
    return JavaLangInteger_parseIntWithNSString_([num description]);
  }
  @catch (JavaLangNumberFormatException *e) {
    return -1;
  }
}

jint GSONJavaVersion_getMajorJavaVersion() {
  GSONJavaVersion_initialize();
  return GSONJavaVersion_majorJavaVersion;
}

jboolean GSONJavaVersion_isJava9OrLater() {
  GSONJavaVersion_initialize();
  return GSONJavaVersion_majorJavaVersion >= 9;
}

void GSONJavaVersion_init(GSONJavaVersion *self) {
  NSObject_init(self);
}

GSONJavaVersion *new_GSONJavaVersion_init() {
  J2OBJC_NEW_IMPL(GSONJavaVersion, init)
}

GSONJavaVersion *create_GSONJavaVersion_init() {
  J2OBJC_CREATE_IMPL(GSONJavaVersion, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GSONJavaVersion)
