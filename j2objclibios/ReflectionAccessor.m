//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/internal/reflect/ReflectionAccessor.java
//

#include "J2ObjC_source.h"
#include "JavaVersion.h"
#include "PreJava9ReflectionAccessor.h"
#include "ReflectionAccessor.h"
#include "UnsafeReflectionAccessor.h"
#include "java/lang/reflect/AccessibleObject.h"

inline GSONReflectionAccessor *GSONReflectionAccessor_get_instance();
static GSONReflectionAccessor *GSONReflectionAccessor_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GSONReflectionAccessor, instance, GSONReflectionAccessor *)

J2OBJC_INITIALIZED_DEFN(GSONReflectionAccessor)

@implementation GSONReflectionAccessor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GSONReflectionAccessor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)makeAccessibleWithJavaLangReflectAccessibleObject:(JavaLangReflectAccessibleObject *)ao {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (GSONReflectionAccessor *)getInstance {
  return GSONReflectionAccessor_getInstance();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "LGSONReflectionAccessor;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(makeAccessibleWithJavaLangReflectAccessibleObject:);
  methods[2].selector = @selector(getInstance);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "instance", "LGSONReflectionAccessor;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "makeAccessible", "LJavaLangReflectAccessibleObject;", &GSONReflectionAccessor_instance };
  static const J2ObjcClassInfo _GSONReflectionAccessor = { "ReflectionAccessor", "com.google.gson.internal.reflect", ptrTable, methods, fields, 7, 0x401, 3, 1, -1, -1, -1, -1, -1 };
  return &_GSONReflectionAccessor;
}

+ (void)initialize {
  if (self == [GSONReflectionAccessor class]) {
    GSONReflectionAccessor_instance = GSONJavaVersion_getMajorJavaVersion() < 9 ? new_GSONPreJava9ReflectionAccessor_init() : (id) new_GSONUnsafeReflectionAccessor_init();
    J2OBJC_SET_INITIALIZED(GSONReflectionAccessor)
  }
}

@end

void GSONReflectionAccessor_init(GSONReflectionAccessor *self) {
  NSObject_init(self);
}

GSONReflectionAccessor *GSONReflectionAccessor_getInstance() {
  GSONReflectionAccessor_initialize();
  return GSONReflectionAccessor_instance;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GSONReflectionAccessor)
