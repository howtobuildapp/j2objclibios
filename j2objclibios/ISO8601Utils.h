//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/internal/bind/util/ISO8601Utils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ISO8601Utils")
#ifdef RESTRICT_ISO8601Utils
#define INCLUDE_ALL_ISO8601Utils 0
#else
#define INCLUDE_ALL_ISO8601Utils 1
#endif
#undef RESTRICT_ISO8601Utils

#if !defined (GSONISO8601Utils_) && (INCLUDE_ALL_ISO8601Utils || defined(INCLUDE_GSONISO8601Utils))
#define GSONISO8601Utils_

@class JavaTextParsePosition;
@class JavaUtilDate;
@class JavaUtilTimeZone;

/*!
 @brief Utilities methods for manipulating dates in iso8601 format.This is much much faster and GC friendly than using SimpleDateFormat so
  highly suitable if you (un)serialize lots of date objects.
 Supported parse format: [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:]mm]]
 - seealso: <a href="http://www.w3.org/TR/NOTE-datetime">this specification</a>
 */
@interface GSONISO8601Utils : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Format a date into 'yyyy-MM-ddThh:mm:ssZ' (default timezone, no milliseconds precision)
 @param date the date to format
 @return the date formatted as 'yyyy-MM-ddThh:mm:ssZ'
 */
+ (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Format a date into 'yyyy-MM-ddThh:mm:ss[.sss]Z' (GMT timezone)
 @param date the date to format
 @param millis true to include millis precision otherwise false
 @return the date formatted as 'yyyy-MM-ddThh:mm:ss[.sss]Z'
 */
+ (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date
                         withBoolean:(jboolean)millis;

/*!
 @brief Format date into yyyy-MM-ddThh:mm:ss[.sss][Z|[+-]hh:mm]
 @param date the date to format
 @param millis true to include millis precision otherwise false
 @param tz timezone to use for the formatting (UTC will produce 'Z')
 @return the date formatted as yyyy-MM-ddThh:mm:ss[.sss][Z|[+-]hh:mm]
 */
+ (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date
                         withBoolean:(jboolean)millis
                withJavaUtilTimeZone:(JavaUtilTimeZone *)tz;

/*!
 @brief Parse a date from ISO-8601 formatted string.It expects a format
  [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?
 [Z|[+-]hh[:mm]]]
 @param date ISO string to parse in the appropriate format.
 @param pos The position to start parsing from, updated to where parsing stopped.
 @return the parsed date
 @throw ParseExceptionif the date is not in the appropriate format
 */
+ (JavaUtilDate *)parseWithNSString:(NSString *)date
          withJavaTextParsePosition:(JavaTextParsePosition *)pos;

@end

J2OBJC_STATIC_INIT(GSONISO8601Utils)

FOUNDATION_EXPORT void GSONISO8601Utils_init(GSONISO8601Utils *self);

FOUNDATION_EXPORT GSONISO8601Utils *new_GSONISO8601Utils_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GSONISO8601Utils *create_GSONISO8601Utils_init();

FOUNDATION_EXPORT NSString *GSONISO8601Utils_formatWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT NSString *GSONISO8601Utils_formatWithJavaUtilDate_withBoolean_(JavaUtilDate *date, jboolean millis);

FOUNDATION_EXPORT NSString *GSONISO8601Utils_formatWithJavaUtilDate_withBoolean_withJavaUtilTimeZone_(JavaUtilDate *date, jboolean millis, JavaUtilTimeZone *tz);

FOUNDATION_EXPORT JavaUtilDate *GSONISO8601Utils_parseWithNSString_withJavaTextParsePosition_(NSString *date, JavaTextParsePosition *pos);

J2OBJC_TYPE_LITERAL_HEADER(GSONISO8601Utils)

@compatibility_alias ComGoogleGsonInternalBindUtilISO8601Utils GSONISO8601Utils;

#endif

#pragma pop_macro("INCLUDE_ALL_ISO8601Utils")
