//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/zhangwen/Documents/zwdir/sync/workspace/howtobuildapp/j2objclibios/javasrc/com/google/gson/JsonParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JsonParser")
#ifdef RESTRICT_JsonParser
#define INCLUDE_ALL_JsonParser 0
#else
#define INCLUDE_ALL_JsonParser 1
#endif
#undef RESTRICT_JsonParser

#if !defined (GSONJsonParser_) && (INCLUDE_ALL_JsonParser || defined(INCLUDE_GSONJsonParser))
#define GSONJsonParser_

@class GSONJsonElement;
@class GSONJsonReader;
@class JavaIoReader;

/*!
 @brief A parser to parse Json into a parse tree of <code>JsonElement</code>s
 @author Inderjeet Singh
 @author Joel Leitch
 @since 1.3
 */
@interface GSONJsonParser : NSObject

#pragma mark Public

/*!
 */
- (instancetype)init;

/*!
 */
- (GSONJsonElement *)parseWithGSONJsonReader:(GSONJsonReader *)json;

/*!
 */
- (GSONJsonElement *)parseWithJavaIoReader:(JavaIoReader *)json;

/*!
 */
- (GSONJsonElement *)parseWithNSString:(NSString *)json;

/*!
 @brief Returns the next value from the JSON stream as a parse tree.
 @throw JsonParseExceptionif there is an IOException or if the specified
      text is not valid JSON
 */
+ (GSONJsonElement *)parseReaderWithGSONJsonReader:(GSONJsonReader *)reader;

/*!
 @brief Parses the specified JSON string into a parse tree
 @param reader JSON text
 @return a parse tree of <code>JsonElement</code>s corresponding to the specified JSON
 @throw JsonParseExceptionif the specified text is not valid JSON
 */
+ (GSONJsonElement *)parseReaderWithJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Parses the specified JSON string into a parse tree
 @param json JSON text
 @return a parse tree of <code>JsonElement</code>s corresponding to the specified JSON
 @throw JsonParseExceptionif the specified text is not valid JSON
 */
+ (GSONJsonElement *)parseStringWithNSString:(NSString *)json;

@end

J2OBJC_EMPTY_STATIC_INIT(GSONJsonParser)

FOUNDATION_EXPORT void GSONJsonParser_init(GSONJsonParser *self);

FOUNDATION_EXPORT GSONJsonParser *new_GSONJsonParser_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GSONJsonParser *create_GSONJsonParser_init();

FOUNDATION_EXPORT GSONJsonElement *GSONJsonParser_parseStringWithNSString_(NSString *json);

FOUNDATION_EXPORT GSONJsonElement *GSONJsonParser_parseReaderWithJavaIoReader_(JavaIoReader *reader);

FOUNDATION_EXPORT GSONJsonElement *GSONJsonParser_parseReaderWithGSONJsonReader_(GSONJsonReader *reader);

J2OBJC_TYPE_LITERAL_HEADER(GSONJsonParser)

@compatibility_alias ComGoogleGsonJsonParser GSONJsonParser;

#endif

#pragma pop_macro("INCLUDE_ALL_JsonParser")
